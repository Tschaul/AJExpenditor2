/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var utils_1 = require('../utils');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "class-name",
    description: "Enforces PascalCased class and interface names.",
    rationale: "Makes it easy to differentiate classes from regular variables at a glance.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Class name must be in pascal case";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isClassLikeDeclaration(node) && node.name !== undefined || tsutils_1.isInterfaceDeclaration(node)) {
      if (!isPascalCased(node.name.text)) {
        ctx.addFailureAtNode(node.name, Rule.FAILURE_STRING);
      }
    }
    return ts.forEachChild(node, cb);
  });
}
function isPascalCased(name) {
  return utils_1.isUpperCase(name[0]) && !name.includes("_");
}
