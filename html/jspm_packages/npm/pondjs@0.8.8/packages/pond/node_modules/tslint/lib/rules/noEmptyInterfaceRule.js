/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-empty-interface",
    description: "Forbids empty interfaces.",
    rationale: "An empty interface is equivalent to its supertype (or `{}`).",
    optionsDescription: "Not configurable.",
    options: null,
    type: "typescript",
    typescriptOnly: true
  };
  Rule.FAILURE_STRING = "An empty interface is equivalent to `{}`.";
  Rule.FAILURE_STRING_FOR_EXTENDS = "An interface declaring no members is equivalent to its supertype.";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isInterfaceDeclaration(node) && node.members.length === 0 && (node.heritageClauses === undefined || node.heritageClauses[0].types.length < 2)) {
      return ctx.addFailureAtNode(node.name, node.heritageClauses !== undefined ? Rule.FAILURE_STRING_FOR_EXTENDS : Rule.FAILURE_STRING);
    }
    return ts.forEachChild(node, cb);
  });
}
