/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.FAILURE_STRING = function(name) {
    return "variable '" + name + "' used before declaration";
  };
  Rule.prototype.applyWithProgram = function(sourceFile, program) {
    return this.applyWithFunction(sourceFile, function(ctx) {
      return walk(ctx, program.getTypeChecker());
    });
  };
  Rule.metadata = {
    ruleName: "no-use-before-declare",
    description: "Disallows usage of variables before their declaration.",
    descriptionDetails: (_a = ["\n            This rule is primarily useful when using the `var` keyword -\n            the compiler will detect if a `let` and `const` variable is used before it is declared."], _a.raw = ["\n            This rule is primarily useful when using the \\`var\\` keyword -\n            the compiler will detect if a \\`let\\` and \\`const\\` variable is used before it is declared."], Lint.Utils.dedent(_a)),
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "functionality",
    typescriptOnly: false,
    requiresTypeInfo: true
  };
  return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
function walk(ctx, checker) {
  return ts.forEachChild(ctx.sourceFile, function recur(node) {
    switch (node.kind) {
      case ts.SyntaxKind.TypeReference:
        return;
      case ts.SyntaxKind.PropertyAccessExpression:
        return recur(node.expression);
      case ts.SyntaxKind.Identifier:
        return checkIdentifier(node, checker.getSymbolAtLocation(node));
      case ts.SyntaxKind.ExportSpecifier:
        return checkIdentifier(node.name, checker.getExportSpecifierLocalTargetSymbol(node));
      default:
        return ts.forEachChild(node, recur);
    }
  });
  function checkIdentifier(node, symbol) {
    var declarations = symbol === undefined ? undefined : symbol.declarations;
    if (declarations === undefined || declarations.length === 0) {
      return;
    }
    var declaredBefore = declarations.some(function(decl) {
      switch (decl.kind) {
        case ts.SyntaxKind.FunctionDeclaration:
          return true;
        default:
          return decl.pos <= node.pos || decl.getSourceFile() !== ctx.sourceFile;
      }
    });
    if (!declaredBefore) {
      ctx.addFailureAtNode(node, Rule.FAILURE_STRING(node.text));
    }
  }
}
var _a;
