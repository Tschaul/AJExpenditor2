/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.FAILURE_STRING = function(maxCount) {
    var maxClassWord = maxCount === 1 ? "class per file is" : "classes per file are";
    return "A maximum of " + maxCount + " " + maxClassWord + " allowed.";
  };
  Rule.prototype.apply = function(sourceFile) {
    var argument = this.ruleArguments[0];
    var maxClasses = isNaN(argument) || argument > 0 ? argument : 1;
    return this.applyWithFunction(sourceFile, walk, {maxClasses: maxClasses});
  };
  Rule.metadata = {
    ruleName: "max-classes-per-file",
    description: (_a = ["\n            A file may not contain more than the specified number of classes"], _a.raw = ["\n            A file may not contain more than the specified number of classes"], Lint.Utils.dedent(_a)),
    rationale: (_b = ["\n            Ensures that files have a single responsibility so that that classes each exist in their own files"], _b.raw = ["\n            Ensures that files have a single responsibility so that that classes each exist in their own files"], Lint.Utils.dedent(_b)),
    optionsDescription: (_c = ["\n            The one required argument is an integer indicating the maximum number of classes that can appear in a file."], _c.raw = ["\n            The one required argument is an integer indicating the maximum number of classes that can appear in a file."], Lint.Utils.dedent(_c)),
    options: {
      type: "array",
      items: [{
        type: "number",
        minimum: 1
      }],
      additionalItems: false,
      minLength: 1,
      maxLength: 2
    },
    optionExamples: [[true, 1], [true, 5]],
    type: "maintainability",
    typescriptOnly: false
  };
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  var sourceFile = ctx.sourceFile,
      maxClasses = ctx.options.maxClasses;
  var classes = 0;
  return ts.forEachChild(sourceFile, function cb(node) {
    if (tsutils_1.isClassLikeDeclaration(node)) {
      classes++;
      if (classes > maxClasses) {
        ctx.addFailureAtNode(node, Rule.FAILURE_STRING(maxClasses));
      }
    }
    return ts.forEachChild(node, cb);
  });
}
var _a,
    _b,
    _c;
