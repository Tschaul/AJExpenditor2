/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    var text = sourceFile.text;
    var offset = text.startsWith("#!") ? text.indexOf("\n") : 0;
    var commentText = ts.forEachLeadingCommentRange(text, offset, function(pos, end, kind) {
      return text.substring(pos + 2, kind === ts.SyntaxKind.SingleLineCommentTrivia ? end : end - 2);
    });
    if (commentText === undefined || !new RegExp(this.ruleArguments[0]).test(commentText)) {
      if (offset !== 0) {
        ++offset;
      }
      return [new Lint.RuleFailure(sourceFile, offset, offset, Rule.FAILURE_STRING, this.ruleName)];
    }
    return [];
  };
  Rule.metadata = {
    ruleName: "file-header",
    description: "Enforces a certain header comment for all files, matched by a regular expression.",
    optionsDescription: "Regular expression to match the header.",
    options: {type: "string"},
    optionExamples: [[true, "Copyright \\d{4}"]],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "missing file header";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
