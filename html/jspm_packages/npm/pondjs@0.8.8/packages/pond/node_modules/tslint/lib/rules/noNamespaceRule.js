/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var OPTION_ALLOW_DECLARATIONS = "allow-declarations";
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk, {allowDeclarations: this.ruleArguments.indexOf(OPTION_ALLOW_DECLARATIONS) !== -1});
  };
  Rule.metadata = {
    ruleName: "no-namespace",
    description: "Disallows use of internal \`module\`s and \`namespace\`s.",
    descriptionDetails: "This rule still allows the use of `declare module ... {}`",
    rationale: (_a = ["\n            ES6-style external modules are the standard way to modularize code.\n            Using `module {}` and `namespace {}` are outdated ways to organize TypeScript code."], _a.raw = ["\n            ES6-style external modules are the standard way to modularize code.\n            Using \\`module {}\\` and \\`namespace {}\\` are outdated ways to organize TypeScript code."], Lint.Utils.dedent(_a)),
    optionsDescription: (_b = ["\n            One argument may be optionally provided:\n\n            * `", "` allows `declare namespace ... {}` to describe external APIs."], _b.raw = ["\n            One argument may be optionally provided:\n\n            * \\`", "\\` allows \\`declare namespace ... {}\\` to describe external APIs."], Lint.Utils.dedent(_b, OPTION_ALLOW_DECLARATIONS)),
    options: {
      type: "array",
      items: {
        type: "string",
        enum: [OPTION_ALLOW_DECLARATIONS]
      },
      minLength: 0,
      maxLength: 1
    },
    optionExamples: [true, [true, OPTION_ALLOW_DECLARATIONS]],
    type: "typescript",
    typescriptOnly: true
  };
  Rule.FAILURE_STRING = "'namespace' and 'module' are disallowed";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  if (ctx.sourceFile.isDeclarationFile && ctx.options.allowDeclarations) {
    return;
  }
  for (var _i = 0,
      _a = ctx.sourceFile.statements; _i < _a.length; _i++) {
    var node = _a[_i];
    if (node.kind === ts.SyntaxKind.ModuleDeclaration) {
      if (node.name.kind !== ts.SyntaxKind.StringLiteral && (!ctx.options.allowDeclarations || !tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword))) {
        ctx.addFailureAtNode(node, Rule.FAILURE_STRING);
      }
    }
  }
}
var _a,
    _b;
