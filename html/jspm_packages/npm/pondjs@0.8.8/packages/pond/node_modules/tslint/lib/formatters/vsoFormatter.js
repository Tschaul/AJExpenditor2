/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var abstractFormatter_1 = require('../language/formatter/abstractFormatter');
var Utils = require('../utils');
var Formatter = (function(_super) {
  tslib_1.__extends(Formatter, _super);
  function Formatter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Formatter.prototype.format = function(failures, warnings) {
    if (warnings === void 0) {
      warnings = [];
    }
    var all = failures.concat(warnings);
    var outputLines = all.map(function(failure) {
      var fileName = failure.getFileName();
      var failureString = failure.getFailure();
      var lineAndCharacter = failure.getStartPosition().getLineAndCharacter();
      var line = lineAndCharacter.line + 1;
      var character = lineAndCharacter.character + 1;
      var code = failure.getRuleName();
      var properties = "sourcepath=" + fileName + ";linenumber=" + line + ";columnnumber=" + character + ";code=" + code + ";";
      return "##vso[task.logissue type=warning;" + properties + "]" + failureString;
    });
    return outputLines.join("\n") + "\n";
  };
  Formatter.metadata = {
    formatterName: "vso",
    description: "Formats output as VSO/TFS logging commands.",
    descriptionDetails: (_a = ["\n            Integrates with Visual Studio Online and Team Foundation Server by outputting errors\n            as 'warning' logging commands."], _a.raw = ["\n            Integrates with Visual Studio Online and Team Foundation Server by outputting errors\n            as 'warning' logging commands."], Utils.dedent(_a)),
    sample: "##vso[task.logissue type=warning;sourcepath=myFile.ts;linenumber=1;columnnumber=14;code=semicolon;]Missing semicolon",
    consumer: "machine"
  };
  return Formatter;
}(abstractFormatter_1.AbstractFormatter));
exports.Formatter = Formatter;
var _a;
