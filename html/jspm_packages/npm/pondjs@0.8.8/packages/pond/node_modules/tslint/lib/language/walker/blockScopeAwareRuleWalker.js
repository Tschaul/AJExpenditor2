/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../../tslib/tslib');
var ts = require('../../../../typescript/lib/typescript');
var utils_1 = require('../utils');
var scopeAwareRuleWalker_1 = require('./scopeAwareRuleWalker');
var BlockScopeAwareRuleWalker = (function(_super) {
  tslib_1.__extends(BlockScopeAwareRuleWalker, _super);
  function BlockScopeAwareRuleWalker(sourceFile, options) {
    var _this = _super.call(this, sourceFile, options) || this;
    _this.blockScopeStack = ts.isExternalModule(sourceFile) ? [] : [_this.createBlockScope(sourceFile)];
    return _this;
  }
  BlockScopeAwareRuleWalker.prototype.getAllBlockScopes = function() {
    return this.blockScopeStack;
  };
  BlockScopeAwareRuleWalker.prototype.getCurrentBlockScope = function() {
    return this.blockScopeStack[this.blockScopeStack.length - 1];
  };
  BlockScopeAwareRuleWalker.prototype.getCurrentBlockDepth = function() {
    return this.blockScopeStack.length;
  };
  BlockScopeAwareRuleWalker.prototype.onBlockScopeStart = function() {
    return;
  };
  BlockScopeAwareRuleWalker.prototype.onBlockScopeEnd = function() {
    return;
  };
  BlockScopeAwareRuleWalker.prototype.findBlockScope = function(predicate) {
    for (var i = this.blockScopeStack.length - 1; i >= 0; i--) {
      if (predicate(this.blockScopeStack[i])) {
        return this.blockScopeStack[i];
      }
    }
    return undefined;
  };
  BlockScopeAwareRuleWalker.prototype.visitNode = function(node) {
    var isNewBlockScope = this.isBlockScopeBoundary(node);
    if (isNewBlockScope) {
      this.blockScopeStack.push(this.createBlockScope(node));
      this.onBlockScopeStart();
    }
    _super.prototype.visitNode.call(this, node);
    if (isNewBlockScope) {
      this.onBlockScopeEnd();
      this.blockScopeStack.pop();
    }
  };
  BlockScopeAwareRuleWalker.prototype.isBlockScopeBoundary = function(node) {
    return utils_1.isBlockScopeBoundary(node);
  };
  return BlockScopeAwareRuleWalker;
}(scopeAwareRuleWalker_1.ScopeAwareRuleWalker));
exports.BlockScopeAwareRuleWalker = BlockScopeAwareRuleWalker;
