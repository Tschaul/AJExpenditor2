/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var ALLOW_EMPTY_CATCH = "allow-empty-catch";
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk, {allowEmptyCatch: this.ruleArguments.indexOf(ALLOW_EMPTY_CATCH) !== -1});
  };
  Rule.metadata = {
    ruleName: "no-empty",
    description: "Disallows empty blocks.",
    descriptionDetails: "Blocks with a comment inside are not considered empty.",
    rationale: "Empty blocks are often indicators of missing code.",
    optionsDescription: (_a = ["\n            If `", "` is specified, then catch blocks are allowed to be empty."], _a.raw = ["\n            If \\`", "\\` is specified, then catch blocks are allowed to be empty."], Lint.Utils.dedent(_a, ALLOW_EMPTY_CATCH)),
    options: {
      type: "string",
      enum: [ALLOW_EMPTY_CATCH]
    },
    optionExamples: [true, [true, ALLOW_EMPTY_CATCH]],
    type: "functionality",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "block is empty";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (node.kind === ts.SyntaxKind.Block && node.statements.length === 0 && !isExcluded(node.parent, ctx.options)) {
      var start = node.getStart(ctx.sourceFile);
      if (Lint.hasCommentAfterPosition(ctx.sourceFile.text, start + 1)) {
        return;
      }
      return ctx.addFailure(start, node.end, Rule.FAILURE_STRING);
    }
    return ts.forEachChild(node, cb);
  });
}
function isExcluded(node, options) {
  if (options.allowEmptyCatch && node.kind === ts.SyntaxKind.CatchClause) {
    return true;
  }
  return tsutils_1.isConstructorDeclaration(node) && (tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.PrivateKeyword, ts.SyntaxKind.ProtectedKeyword) || node.parameters.some(tsutils_1.isParameterProperty));
}
var _a;
