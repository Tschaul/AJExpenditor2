/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-var-keyword",
    description: "Disallows usage of the `var` keyword.",
    descriptionDetails: "Use `let` or `const` instead.",
    hasFix: true,
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "functionality",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Forbidden 'var' keyword, use 'let' or 'const' instead";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  var sourceFile = ctx.sourceFile;
  return ts.forEachChild(sourceFile, function cb(node) {
    var parent = node.parent;
    if (tsutils_1.isVariableDeclarationList(node) && !tsutils_1.isBlockScopedVariableDeclarationList(node) && (!tsutils_1.isVariableStatement(parent) || !isGlobalVarDeclaration(parent))) {
      var start = node.getStart(sourceFile);
      var width = "var".length;
      var fix = sourceFile.isDeclarationFile ? undefined : new Lint.Replacement(start, width, "let");
      ctx.addFailureAt(start, width, Rule.FAILURE_STRING, fix);
    }
    return ts.forEachChild(node, cb);
  });
}
function isGlobalVarDeclaration(node) {
  var parent = node.parent;
  return Lint.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword) || parent.kind === ts.SyntaxKind.ModuleBlock && Lint.isNodeFlagSet(parent.parent, ts.NodeFlags.GlobalAugmentation);
}
