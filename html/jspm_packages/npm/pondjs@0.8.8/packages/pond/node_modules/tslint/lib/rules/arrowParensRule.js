/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var BAN_SINGLE_ARG_PARENS = "ban-single-arg-parens";
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk, {banSingleArgParens: this.ruleArguments.indexOf(BAN_SINGLE_ARG_PARENS) !== -1});
  };
  Rule.metadata = {
    ruleName: "arrow-parens",
    description: "Requires parentheses around the parameters of arrow function definitions.",
    hasFix: true,
    rationale: "Maintains stylistic consistency with other arrow function definitions.",
    optionsDescription: (_a = ["\n            If `", "` is specified, then arrow functions with one parameter\n            must not have parentheses if removing them is allowed by TypeScript."], _a.raw = ["\n            If \\`", "\\` is specified, then arrow functions with one parameter\n            must not have parentheses if removing them is allowed by TypeScript."], Lint.Utils.dedent(_a, BAN_SINGLE_ARG_PARENS)),
    options: {
      type: "string",
      enum: [BAN_SINGLE_ARG_PARENS]
    },
    optionExamples: [true, [true, BAN_SINGLE_ARG_PARENS]],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING_MISSING = "Parentheses are required around the parameters of an arrow function definition";
  Rule.FAILURE_STRING_EXISTS = "Parentheses are prohibited around the parameter in this single parameter arrow function";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  function cb(node) {
    if (tsutils_1.isArrowFunction(node) && parensAreOptional(node)) {
      var openParen = tsutils_1.getChildOfKind(node, ts.SyntaxKind.OpenParenToken);
      if (openParen === undefined) {
        if (!ctx.options.banSingleArgParens) {
          var parameter = node.parameters[0];
          var start = parameter.getStart(ctx.sourceFile);
          var end = parameter.end;
          ctx.addFailure(start, end, Rule.FAILURE_STRING_MISSING, [Lint.Replacement.appendText(start, "("), Lint.Replacement.appendText(end, ")")]);
        }
      } else if (ctx.options.banSingleArgParens) {
        var closeParen = tsutils_1.getChildOfKind(node, ts.SyntaxKind.CloseParenToken);
        ctx.addFailureAtNode(node.parameters[0], Rule.FAILURE_STRING_EXISTS, [Lint.Replacement.deleteText(openParen.end - 1, 1), Lint.Replacement.deleteText(closeParen.end - 1, 1)]);
      }
    }
    return ts.forEachChild(node, cb);
  }
  return ts.forEachChild(ctx.sourceFile, cb);
}
function parensAreOptional(node) {
  return node.parameters.length === 1 && node.typeParameters === undefined && node.type === undefined && isSimpleParameter(node.parameters[0]);
}
function isSimpleParameter(parameter) {
  return parameter.name.kind === ts.SyntaxKind.Identifier && parameter.dotDotDotToken === undefined && parameter.initializer === undefined && parameter.questionToken === undefined && parameter.type === undefined;
}
var _a;
