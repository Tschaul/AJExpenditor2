/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-misused-new",
    description: "Warns on apparent attempts to define constructors for interfaces or `new` for classes.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "functionality",
    typescriptOnly: true
  };
  Rule.FAILURE_STRING_INTERFACE = "Interfaces cannot be constructed, only classes. Did you mean `declare class`?";
  Rule.FAILURE_STRING_CLASS = '`new` in a class is a method named "new". Did you mean `constructor`?';
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isMethodSignature(node)) {
      if (tsutils_1.getPropertyName(node.name) === "constructor") {
        ctx.addFailureAtNode(node, Rule.FAILURE_STRING_INTERFACE);
      }
    } else if (tsutils_1.isMethodDeclaration(node)) {
      if (node.body === undefined && tsutils_1.getPropertyName(node.name) === "new" && returnTypeMatchesParent(node.parent, node)) {
        ctx.addFailureAtNode(node, Rule.FAILURE_STRING_CLASS);
      }
    } else if (tsutils_1.isConstructSignatureDeclaration(node)) {
      if (returnTypeMatchesParent(node.parent, node)) {
        ctx.addFailureAtNode(node, Rule.FAILURE_STRING_INTERFACE);
      }
    }
    return ts.forEachChild(node, cb);
  });
}
function returnTypeMatchesParent(parent, decl) {
  if (parent.name === undefined || decl.type === undefined || !tsutils_1.isTypeReferenceNode(decl.type)) {
    return false;
  }
  return decl.type.typeName.kind === ts.SyntaxKind.Identifier && decl.type.typeName.text === parent.name.text;
}
