/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var utils = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "jsdoc-format",
    description: "Enforces basic format rules for JSDoc comments.",
    descriptionDetails: (_a = ["\n            The following rules are enforced for JSDoc comments (comments starting with `/**`):\n\n            * each line contains an asterisk and asterisks must be aligned\n            * each asterisk must be followed by either a space or a newline (except for the first and the last)\n            * the only characters before the asterisk on each line must be whitespace characters\n            * one line comments must start with `/** ` and end with `*/`"], _a.raw = ["\n            The following rules are enforced for JSDoc comments (comments starting with \\`/**\\`):\n\n            * each line contains an asterisk and asterisks must be aligned\n            * each asterisk must be followed by either a space or a newline (except for the first and the last)\n            * the only characters before the asterisk on each line must be whitespace characters\n            * one line comments must start with \\`/** \\` and end with \\`*/\\`"], Lint.Utils.dedent(_a)),
    rationale: "Helps maintain a consistent, readable style for JSDoc comments.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "style",
    typescriptOnly: false
  };
  Rule.ALIGNMENT_FAILURE_STRING = "asterisks in jsdoc must be aligned";
  Rule.FORMAT_FAILURE_STRING = "jsdoc is not formatted correctly on this line";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return utils.forEachComment(ctx.sourceFile, function(fullText, _a) {
    var kind = _a.kind,
        pos = _a.pos,
        end = _a.end;
    if (kind !== ts.SyntaxKind.MultiLineCommentTrivia || fullText[pos + 2] !== "*" || fullText[pos + 3] === "*" || fullText[pos + 3] === "/") {
      return;
    }
    var lines = fullText.slice(pos + 3, end - 2).split("\n");
    var firstLine = lines[0];
    if (lines.length === 1) {
      if (firstLine[0] !== " " || !firstLine.endsWith(" ")) {
        ctx.addFailure(pos, end, Rule.FORMAT_FAILURE_STRING);
      }
      return;
    }
    var alignColumn = getAlignColumn(ctx.sourceFile, pos + 1);
    var lineStart = pos + firstLine.length + 4;
    var endIndex = lines.length - 1;
    for (var i = 1; i < endIndex; ++i) {
      var line = lines[i].endsWith("\r") ? lines[i].slice(0, -1) : lines[i];
      if (!/^\s*\*(?: |$)/.test(line)) {
        ctx.addFailureAt(lineStart, line.length, Rule.FORMAT_FAILURE_STRING);
      }
      if (line.indexOf("*") !== alignColumn) {
        ctx.addFailureAt(lineStart, line.length, Rule.ALIGNMENT_FAILURE_STRING);
      }
      lineStart += lines[i].length + 1;
    }
    var lastLine = lines[endIndex];
    if (lastLine.search(/\S/) !== -1) {
      ctx.addFailure(lineStart, end, Rule.FORMAT_FAILURE_STRING);
    }
    if (lastLine.length !== alignColumn) {
      ctx.addFailure(lineStart, end, Rule.ALIGNMENT_FAILURE_STRING);
    }
  });
}
function getAlignColumn(sourceFile, pos) {
  var result = ts.getLineAndCharacterOfPosition(sourceFile, pos);
  return result.line === 0 && sourceFile.text[0] === "\uFEFF" ? result.character - 1 : result.character;
}
var _a;
