/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "interface-over-type-literal",
    description: "Prefer an interface declaration over a type literal (`type T = { ... }`)",
    rationale: "Interfaces are generally preferred over type literals because interfaces can be implemented, extended and merged.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "style",
    typescriptOnly: true,
    hasFix: true
  };
  Rule.FAILURE_STRING = "Use an interface instead of a type literal.";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isTypeAliasDeclaration(node) && tsutils_1.isTypeLiteralNode(node.type)) {
      var typeKeyword = tsutils_1.getChildOfKind(node, ts.SyntaxKind.TypeKeyword, ctx.sourceFile);
      var fix = [new Lint.Replacement(typeKeyword.end - 4, 4, "interface"), Lint.Replacement.deleteFromTo(node.type.pos - 1, node.type.members.pos - 1)];
      if (ctx.sourceFile.text[node.end - 1] === ";") {
        fix.push(Lint.Replacement.deleteText(node.end - 1, 1));
      }
      ctx.addFailureAtNode(node.name, Rule.FAILURE_STRING, fix);
    }
    return ts.forEachChild(node, cb);
  });
}
