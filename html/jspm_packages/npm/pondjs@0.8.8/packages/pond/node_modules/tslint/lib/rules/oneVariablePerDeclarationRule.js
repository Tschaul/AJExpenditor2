/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var OPTION_IGNORE_FOR_LOOP = "ignore-for-loop";
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk, {ignoreForLoop: this.ruleArguments.indexOf(OPTION_IGNORE_FOR_LOOP) !== -1});
  };
  Rule.metadata = {
    ruleName: "one-variable-per-declaration",
    description: "Disallows multiple variable definitions in the same declaration statement.",
    optionsDescription: (_a = ["\n            One argument may be optionally provided:\n\n            * `", "` allows multiple variable definitions in a for loop declaration."], _a.raw = ["\n            One argument may be optionally provided:\n\n            * \\`", "\\` allows multiple variable definitions in a for loop declaration."], Lint.Utils.dedent(_a, OPTION_IGNORE_FOR_LOOP)),
    options: {
      type: "array",
      items: {
        type: "string",
        enum: [OPTION_IGNORE_FOR_LOOP]
      },
      minLength: 0,
      maxLength: 1
    },
    optionExamples: [true, [true, OPTION_IGNORE_FOR_LOOP]],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Multiple variable declarations in the same statement are forbidden";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isVariableStatement(node) && node.declarationList.declarations.length > 1) {
      ctx.addFailureAtNode(node, Rule.FAILURE_STRING);
    } else if (tsutils_1.isForStatement(node) && !ctx.options.ignoreForLoop) {
      var initializer = node.initializer;
      if (initializer !== undefined && initializer.kind === ts.SyntaxKind.VariableDeclarationList && initializer.declarations.length > 1) {
        ctx.addFailureAtNode(initializer, Rule.FAILURE_STRING);
      }
    }
    ts.forEachChild(node, cb);
  });
}
var _a;
