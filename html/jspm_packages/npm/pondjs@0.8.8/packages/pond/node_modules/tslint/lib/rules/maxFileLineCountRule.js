/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.FAILURE_STRING = function(lineCount, lineLimit) {
    return "This file has " + lineCount + " lines, which exceeds the maximum of " + lineLimit + " lines allowed. " + "Consider breaking this file up into smaller parts";
  };
  Rule.prototype.isEnabled = function() {
    return _super.prototype.isEnabled.call(this) && this.ruleArguments[0] > 0;
  };
  Rule.prototype.apply = function(sourceFile) {
    var lineLimit = this.ruleArguments[0];
    var lineCount = sourceFile.getLineStarts().length;
    if (lineCount <= lineLimit) {
      return [];
    }
    var len = sourceFile.text.length;
    return [new Lint.RuleFailure(sourceFile, len - 1, len, Rule.FAILURE_STRING(lineCount, lineLimit), this.ruleName)];
  };
  Rule.metadata = {
    ruleName: "max-file-line-count",
    description: "Requires files to remain under a certain number of lines",
    rationale: (_a = ["\n            Limiting the number of lines allowed in a file allows files to remain small,\n            single purpose, and maintainable."], _a.raw = ["\n            Limiting the number of lines allowed in a file allows files to remain small,\n            single purpose, and maintainable."], Lint.Utils.dedent(_a)),
    optionsDescription: "An integer indicating the maximum number of lines.",
    options: {
      type: "number",
      minimum: "1"
    },
    optionExamples: [[true, 300]],
    type: "maintainability",
    typescriptOnly: false
  };
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var _a;
