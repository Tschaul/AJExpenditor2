/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var LEGAL_TYPEOF_RESULTS = new Set(["undefined", "string", "boolean", "number", "function", "object", "symbol"]);
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "typeof-compare",
    description: "Makes sure result of `typeof` is compared to correct string values",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "functionality",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "'typeof' expression must be compared to one of: " + Array.from(LEGAL_TYPEOF_RESULTS).map(function(x) {
    return "\"" + x + "\"";
  }).join(", ");
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils.isBinaryExpression(node)) {
      var operatorToken = node.operatorToken,
          left = node.left,
          right = node.right;
      if (Lint.getEqualsKind(operatorToken) !== undefined && (isFaultyTypeof(left, right) || isFaultyTypeof(right, left))) {
        ctx.addFailureAtNode(node, Rule.FAILURE_STRING);
      }
    }
    ts.forEachChild(node, cb);
  });
}
function isFaultyTypeof(left, right) {
  return left.kind === ts.SyntaxKind.TypeOfExpression && isFaultyTypeofResult(right);
}
function isFaultyTypeofResult(node) {
  switch (node.kind) {
    case ts.SyntaxKind.StringLiteral:
      return !LEGAL_TYPEOF_RESULTS.has(node.text);
    case ts.SyntaxKind.Identifier:
      return node.originalKeywordKind === ts.SyntaxKind.UndefinedKeyword;
    case ts.SyntaxKind.NullKeyword:
    case ts.SyntaxKind.NumericLiteral:
    case ts.SyntaxKind.TrueKeyword:
    case ts.SyntaxKind.FalseKeyword:
    case ts.SyntaxKind.ObjectLiteralExpression:
    case ts.SyntaxKind.ArrayLiteralExpression:
      return true;
    default:
      return false;
  }
}
