/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var error_1 = require('../error');
var Lint = require('../index');
var OPTION_SINGLE = "single";
var OPTION_DOUBLE = "double";
var OPTION_JSX_SINGLE = "jsx-single";
var OPTION_JSX_DOUBLE = "jsx-double";
var OPTION_AVOID_TEMPLATE = "avoid-template";
var OPTION_AVOID_ESCAPE = "avoid-escape";
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.FAILURE_STRING = function(actual, expected) {
    return actual + " should be " + expected;
  };
  Rule.prototype.isEnabled = function() {
    return _super.prototype.isEnabled.call(this) && (this.ruleArguments[0] === OPTION_SINGLE || this.ruleArguments[0] === OPTION_DOUBLE);
  };
  Rule.prototype.apply = function(sourceFile) {
    var args = this.ruleArguments;
    if (args.length > 0) {
      if (args[0] !== OPTION_SINGLE && args[0] !== OPTION_DOUBLE) {
        error_1.showWarningOnce("Warning: First argument to 'quotemark' rule should be \"" + OPTION_SINGLE + "\" or \"" + OPTION_DOUBLE + "\"");
        return [];
      }
    }
    var quoteMark = args[0] === OPTION_SINGLE ? "'" : '"';
    return this.applyWithFunction(sourceFile, walk, {
      avoidEscape: hasArg(OPTION_AVOID_ESCAPE),
      avoidTemplate: hasArg(OPTION_AVOID_TEMPLATE),
      jsxQuoteMark: hasArg(OPTION_JSX_SINGLE) ? "'" : hasArg(OPTION_JSX_DOUBLE) ? '"' : quoteMark,
      quoteMark: quoteMark
    });
    function hasArg(name) {
      return args.indexOf(name) !== -1;
    }
  };
  Rule.metadata = {
    ruleName: "quotemark",
    description: "Requires single or double quotes for string literals.",
    hasFix: true,
    optionsDescription: (_a = ["\n            Five arguments may be optionally provided:\n\n            * `\"", "\"` enforces single quotes.\n            * `\"", "\"` enforces double quotes.\n            * `\"", "\"` enforces single quotes for JSX attributes.\n            * `\"", "\"` enforces double quotes for JSX attributes.\n            * `\"", "\"` forbids single-line untagged template strings that do not contain string interpolations.\n            * `\"", "\"` allows you to use the \"other\" quotemark in cases where escaping would normally be required.\n            For example, `[true, \"", "\", \"", "\"]` would not report a failure on the string literal\n            `'Hello \"World\"'`."], _a.raw = ["\n            Five arguments may be optionally provided:\n\n            * \\`\"", "\"\\` enforces single quotes.\n            * \\`\"", "\"\\` enforces double quotes.\n            * \\`\"", "\"\\` enforces single quotes for JSX attributes.\n            * \\`\"", "\"\\` enforces double quotes for JSX attributes.\n            * \\`\"", "\"\\` forbids single-line untagged template strings that do not contain string interpolations.\n            * \\`\"", "\"\\` allows you to use the \"other\" quotemark in cases where escaping would normally be required.\n            For example, \\`[true, \"", "\", \"", "\"]\\` would not report a failure on the string literal\n            \\`'Hello \"World\"'\\`."], Lint.Utils.dedent(_a, OPTION_SINGLE, OPTION_DOUBLE, OPTION_JSX_SINGLE, OPTION_JSX_DOUBLE, OPTION_AVOID_TEMPLATE, OPTION_AVOID_ESCAPE, OPTION_DOUBLE, OPTION_AVOID_ESCAPE)),
    options: {
      type: "array",
      items: {
        type: "string",
        enum: [OPTION_SINGLE, OPTION_DOUBLE, OPTION_JSX_SINGLE, OPTION_JSX_DOUBLE, OPTION_AVOID_ESCAPE]
      },
      minLength: 0,
      maxLength: 5
    },
    optionExamples: [[true, OPTION_SINGLE, OPTION_AVOID_ESCAPE, OPTION_AVOID_TEMPLATE], [true, OPTION_SINGLE, OPTION_JSX_DOUBLE]],
    type: "style",
    typescriptOnly: false
  };
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  var sourceFile = ctx.sourceFile,
      options = ctx.options;
  ts.forEachChild(sourceFile, function cb(node) {
    if (tsutils_1.isStringLiteral(node) || options.avoidTemplate && tsutils_1.isNoSubstitutionTemplateLiteral(node) && node.parent.kind !== ts.SyntaxKind.TaggedTemplateExpression && tsutils_1.isSameLine(sourceFile, node.getStart(sourceFile), node.end)) {
      var expectedQuoteMark = node.parent.kind === ts.SyntaxKind.JsxAttribute ? options.jsxQuoteMark : options.quoteMark;
      var actualQuoteMark = sourceFile.text[node.end - 1];
      if (actualQuoteMark === expectedQuoteMark) {
        return;
      }
      var fixQuoteMark = expectedQuoteMark;
      var needsQuoteEscapes = node.text.includes(expectedQuoteMark);
      if (needsQuoteEscapes && options.avoidEscape) {
        if (node.kind === ts.SyntaxKind.StringLiteral) {
          return;
        }
        fixQuoteMark = expectedQuoteMark === '"' ? "'" : '"';
        if (node.text.includes(fixQuoteMark)) {
          return;
        }
      }
      var start = node.getStart(sourceFile);
      var text = sourceFile.text.substring(start + 1, node.end - 1);
      if (needsQuoteEscapes) {
        text = text.replace(new RegExp(fixQuoteMark, "g"), "\\" + fixQuoteMark);
      }
      text = text.replace(new RegExp("\\\\" + actualQuoteMark, "g"), actualQuoteMark);
      return ctx.addFailure(start, node.end, Rule.FAILURE_STRING(actualQuoteMark, fixQuoteMark), new Lint.Replacement(start, node.end - start, fixQuoteMark + text + fixQuoteMark));
    }
    ts.forEachChild(node, cb);
  });
}
var _a;
