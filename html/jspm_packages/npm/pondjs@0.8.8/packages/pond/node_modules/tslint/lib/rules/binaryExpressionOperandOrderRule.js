/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var utils_1 = require('../language/utils');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "binary-expression-operand-order",
    description: (_a = ["\n            In a binary expression, a literal should always be on the right-hand side if possible.\n            For example, prefer 'x + 1' over '1 + x'."], _a.raw = ["\n            In a binary expression, a literal should always be on the right-hand side if possible.\n            For example, prefer 'x + 1' over '1 + x'."], Lint.Utils.dedent(_a)),
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Literal expression should be on the right-hand side of a binary expression.";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isBinaryExpression(node) && isLiteral(node.left) && !isLiteral(node.right) && !isAllowedOrderedOperator(node)) {
      ctx.addFailureAtNode(node, Rule.FAILURE_STRING);
    }
    ts.forEachChild(node, cb);
  });
}
function isAllowedOrderedOperator(node) {
  switch (node.operatorToken.kind) {
    case ts.SyntaxKind.PlusToken:
      return node.left.kind === ts.SyntaxKind.StringLiteral;
    case ts.SyntaxKind.MinusToken:
    case ts.SyntaxKind.SlashToken:
    case ts.SyntaxKind.PercentToken:
    case ts.SyntaxKind.LessThanLessThanToken:
    case ts.SyntaxKind.GreaterThanGreaterThanToken:
    case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:
    case ts.SyntaxKind.AsteriskAsteriskToken:
    case ts.SyntaxKind.InKeyword:
    case ts.SyntaxKind.CommaToken:
      return true;
    default:
      return false;
  }
}
function isLiteral(node) {
  switch (node.kind) {
    case ts.SyntaxKind.StringLiteral:
    case ts.SyntaxKind.NumericLiteral:
    case ts.SyntaxKind.TrueKeyword:
    case ts.SyntaxKind.FalseKeyword:
    case ts.SyntaxKind.NullKeyword:
      return true;
    case ts.SyntaxKind.Identifier:
      return node.originalKeywordKind === ts.SyntaxKind.UndefinedKeyword;
    case ts.SyntaxKind.PrefixUnaryExpression:
      return utils_1.isNegativeNumberLiteral(node);
    case ts.SyntaxKind.ParenthesizedExpression:
      return isLiteral(node.expression);
    default:
      return false;
  }
}
var _a;
