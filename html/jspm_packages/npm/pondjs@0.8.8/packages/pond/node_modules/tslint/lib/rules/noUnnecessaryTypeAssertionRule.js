/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.applyWithProgram = function(sourceFile, program) {
    return this.applyWithWalker(new Walker(sourceFile, this.ruleName, program.getTypeChecker()));
  };
  Rule.metadata = {
    ruleName: "no-unnecessary-type-assertion",
    description: "Warns if a type assertion does not change the type of an expression.",
    options: null,
    optionsDescription: "Not configurable",
    type: "typescript",
    hasFix: true,
    typescriptOnly: true,
    requiresTypeInfo: true
  };
  Rule.FAILURE_STRING = "This assertion is unnecessary since it does not change the type of the expression.";
  return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var Walker = (function(_super) {
  tslib_1.__extends(Walker, _super);
  function Walker(sourceFile, ruleName, checker) {
    var _this = _super.call(this, sourceFile, ruleName, undefined) || this;
    _this.checker = checker;
    return _this;
  }
  Walker.prototype.walk = function(sourceFile) {
    var _this = this;
    var cb = function(node) {
      switch (node.kind) {
        case ts.SyntaxKind.TypeAssertionExpression:
        case ts.SyntaxKind.NonNullExpression:
        case ts.SyntaxKind.AsExpression:
          _this.verifyCast(node);
      }
      return ts.forEachChild(node, cb);
    };
    return ts.forEachChild(sourceFile, cb);
  };
  Walker.prototype.verifyCast = function(node) {
    var castType = this.checker.getTypeAtLocation(node);
    if (castType === undefined) {
      return;
    }
    var uncastType = this.checker.getTypeAtLocation(node.expression);
    if (uncastType === castType) {
      this.addFailureAtNode(node, Rule.FAILURE_STRING, node.kind === ts.SyntaxKind.TypeAssertionExpression ? Lint.Replacement.deleteFromTo(node.getStart(), node.expression.getStart()) : Lint.Replacement.deleteFromTo(node.expression.getEnd(), node.getEnd()));
    }
  };
  return Walker;
}(Lint.AbstractWalker));
