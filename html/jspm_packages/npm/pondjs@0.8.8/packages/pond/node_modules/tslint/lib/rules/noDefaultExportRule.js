/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-default-export",
    description: "Disallows default exports in ES6-style modules.",
    descriptionDetails: "Use named exports instead.",
    rationale: (_a = ["\n            Named imports/exports [promote clarity](https://github.com/palantir/tslint/issues/1182#issue-151780453).\n            In addition, current tooling differs on the correct way to handle default imports/exports.\n            Avoiding them all together can help avoid tooling bugs and conflicts."], _a.raw = ["\n            Named imports/exports [promote clarity](https://github.com/palantir/tslint/issues/1182#issue-151780453).\n            In addition, current tooling differs on the correct way to handle default imports/exports.\n            Avoiding them all together can help avoid tooling bugs and conflicts."], Lint.Utils.dedent(_a)),
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "maintainability",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Use of default exports is forbidden";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  if (ctx.sourceFile.isDeclarationFile || !ts.isExternalModule(ctx.sourceFile)) {
    return;
  }
  for (var _i = 0,
      _a = ctx.sourceFile.statements; _i < _a.length; _i++) {
    var statement = _a[_i];
    if (statement.kind === ts.SyntaxKind.ExportAssignment) {
      if (!statement.isExportEquals) {
        ctx.addFailureAtNode(statement.getChildAt(1, ctx.sourceFile), Rule.FAILURE_STRING);
      }
    } else if (statement.modifiers !== undefined && statement.modifiers.length >= 2 && statement.modifiers[0].kind === ts.SyntaxKind.ExportKeyword && statement.modifiers[1].kind === ts.SyntaxKind.DefaultKeyword) {
      ctx.addFailureAtNode(statement.modifiers[1], Rule.FAILURE_STRING);
    }
  }
}
var _a;
