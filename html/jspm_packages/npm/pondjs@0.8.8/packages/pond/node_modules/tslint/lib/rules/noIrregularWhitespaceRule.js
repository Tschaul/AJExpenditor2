/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-irregular-whitespace",
    description: "Disallow irregular whitespace outside of strings and comments",
    hasFix: true,
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Irregular whitespace not allowed";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
exports.IRREGULAR_WHITESPACE_REGEX = /[\u000b\u000c\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000\u2028\u2029]+/mg;
function walk(ctx) {
  exports.IRREGULAR_WHITESPACE_REGEX.lastIndex = 0;
  var match;
  while ((match = exports.IRREGULAR_WHITESPACE_REGEX.exec(ctx.sourceFile.text)) !== null) {
    var start = match.index;
    var len = match[0].length;
    var fix = new Lint.Replacement(start, len, " ".repeat(len));
    ctx.addFailureAt(start, len, Rule.FAILURE_STRING, fix);
  }
}
