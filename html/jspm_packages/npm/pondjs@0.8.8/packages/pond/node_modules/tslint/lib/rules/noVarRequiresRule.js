/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    var requiresWalker = new NoVarRequiresWalker(sourceFile, this.getOptions());
    return this.applyWithWalker(requiresWalker);
  };
  Rule.metadata = {
    ruleName: "no-var-requires",
    description: "Disallows the use of require statements except in import statements.",
    descriptionDetails: (_a = ["\n            In other words, the use of forms such as `var module = require(\"module\")` are banned.\n            Instead use ES6 style imports or `import foo = require('foo')` imports."], _a.raw = ["\n            In other words, the use of forms such as \\`var module = require(\"module\")\\` are banned.\n            Instead use ES6 style imports or \\`import foo = require('foo')\\` imports."], Lint.Utils.dedent(_a)),
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "typescript",
    typescriptOnly: true
  };
  Rule.FAILURE_STRING = "require statement not part of an import statement";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var NoVarRequiresWalker = (function(_super) {
  tslib_1.__extends(NoVarRequiresWalker, _super);
  function NoVarRequiresWalker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  NoVarRequiresWalker.prototype.createScope = function() {
    return {};
  };
  NoVarRequiresWalker.prototype.visitCallExpression = function(node) {
    var expression = node.expression;
    if (this.getCurrentDepth() <= 1 && expression.kind === ts.SyntaxKind.Identifier) {
      var identifierName = expression.text;
      if (identifierName === "require") {
        this.addFailureAtNode(node, Rule.FAILURE_STRING);
      }
    }
    _super.prototype.visitCallExpression.call(this, node);
  };
  return NoVarRequiresWalker;
}(Lint.ScopeAwareRuleWalker));
var _a;
