/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.applyWithProgram = function(sourceFile, program) {
    return this.applyWithFunction(sourceFile, function(ctx) {
      return walk(ctx, program.getTypeChecker());
    }, ["Promise"].concat(this.ruleArguments));
  };
  Rule.metadata = {
    ruleName: "no-floating-promises",
    description: "Promises returned by functions must be handled appropriately.",
    descriptionDetails: "Use `no-unused-expressions` in addition to this rule to reveal even more floating promises.",
    optionsDescription: (_a = ["\n            A list of 'string' names of any additional classes that should also be handled as Promises.\n        "], _a.raw = ["\n            A list of \\'string\\' names of any additional classes that should also be handled as Promises.\n        "], Lint.Utils.dedent(_a)),
    options: {
      type: "list",
      listType: {
        type: "array",
        items: {type: "string"}
      }
    },
    optionExamples: [true, [true, "JQueryPromise"]],
    rationale: "Unhandled Promises can cause unexpected behavior, such as resolving at unexpected times.",
    type: "functionality",
    typescriptOnly: true,
    requiresTypeInfo: true
  };
  Rule.FAILURE_STRING = "Promises must be handled appropriately";
  return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
function walk(ctx, tc) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (tsutils_1.isExpressionStatement(node)) {
      var expression = node.expression;
      if (tsutils_1.isCallExpression(expression) && !isPromiseCatchCall(expression)) {
        var symbol = tc.getTypeAtLocation(expression).symbol;
        if (symbol !== undefined && ctx.options.indexOf(symbol.name) !== -1) {
          ctx.addFailureAtNode(expression, Rule.FAILURE_STRING);
        }
      }
    }
    return ts.forEachChild(node, cb);
  });
}
function isPromiseCatchCall(expression) {
  return tsutils_1.isPropertyAccessExpression(expression.expression) && expression.expression.name.text === "catch";
}
var _a;
