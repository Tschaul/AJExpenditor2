/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../../tslib/tslib');
var rule_1 = require('../rule/rule');
var syntaxWalker_1 = require('./syntaxWalker');
var RuleWalker = (function(_super) {
  tslib_1.__extends(RuleWalker, _super);
  function RuleWalker(sourceFile, options) {
    var _this = _super.call(this) || this;
    _this.sourceFile = sourceFile;
    _this.failures = [];
    _this.options = options.ruleArguments;
    _this.limit = _this.sourceFile.getFullWidth();
    _this.ruleName = options.ruleName;
    return _this;
  }
  RuleWalker.prototype.getSourceFile = function() {
    return this.sourceFile;
  };
  RuleWalker.prototype.getLineAndCharacterOfPosition = function(position) {
    return this.sourceFile.getLineAndCharacterOfPosition(position);
  };
  RuleWalker.prototype.getFailures = function() {
    return this.failures;
  };
  RuleWalker.prototype.getLimit = function() {
    return this.limit;
  };
  RuleWalker.prototype.getOptions = function() {
    return this.options;
  };
  RuleWalker.prototype.hasOption = function(option) {
    if (this.options !== undefined) {
      return this.options.indexOf(option) !== -1;
    } else {
      return false;
    }
  };
  RuleWalker.prototype.createFailure = function(start, width, failure, fix) {
    var from = (start > this.limit) ? this.limit : start;
    var to = ((start + width) > this.limit) ? this.limit : (start + width);
    return new rule_1.RuleFailure(this.sourceFile, from, to, failure, this.ruleName, fix);
  };
  RuleWalker.prototype.addFailure = function(failure) {
    this.failures.push(failure);
  };
  RuleWalker.prototype.addFailureAt = function(start, width, failure, fix) {
    this.addFailure(this.createFailure(start, width, failure, fix));
  };
  RuleWalker.prototype.addFailureFromStartToEnd = function(start, end, failure, fix) {
    this.addFailureAt(start, end - start, failure, fix);
  };
  RuleWalker.prototype.addFailureAtNode = function(node, failure, fix) {
    this.addFailureAt(node.getStart(this.sourceFile), node.getWidth(this.sourceFile), failure, fix);
  };
  RuleWalker.prototype.createReplacement = function(start, length, text) {
    return new rule_1.Replacement(start, length, text);
  };
  RuleWalker.prototype.appendText = function(start, text) {
    return this.createReplacement(start, 0, text);
  };
  RuleWalker.prototype.deleteText = function(start, length) {
    return this.createReplacement(start, length, "");
  };
  RuleWalker.prototype.deleteFromTo = function(start, end) {
    return this.createReplacement(start, end - start, "");
  };
  RuleWalker.prototype.getRuleName = function() {
    return this.ruleName;
  };
  return RuleWalker;
}(syntaxWalker_1.SyntaxWalker));
exports.RuleWalker = RuleWalker;
