/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var abstractFormatter_1 = require('../language/formatter/abstractFormatter');
var utils_1 = require('../utils');
var Formatter = (function(_super) {
  tslib_1.__extends(Formatter, _super);
  function Formatter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Formatter.prototype.format = function(failures) {
    var outputLines = failures.map(function(failure) {
      var fileName = failure.getFileName();
      var failureString = failure.getFailure();
      var camelizedRule = utils_1.camelize(failure.getRuleName());
      var lineAndCharacter = failure.getStartPosition().getLineAndCharacter();
      var positionTuple = "(" + (lineAndCharacter.line + 1) + "," + (lineAndCharacter.character + 1) + ")";
      var severity = failure.getRuleSeverity();
      return "" + fileName + positionTuple + ": " + severity + " " + camelizedRule + ": " + failureString;
    });
    return outputLines.join("\n") + "\n";
  };
  Formatter.metadata = {
    formatterName: "msbuild",
    description: "Formats errors for consumption by msbuild.",
    descriptionDetails: (_a = ["\n            The output is compatible with both msbuild and Visual Studio. All failures have the\n            'warning' severity."], _a.raw = ["\n            The output is compatible with both msbuild and Visual Studio. All failures have the\n            'warning' severity."], utils_1.dedent(_a)),
    sample: "myFile.ts(1,14): warning: Missing semicolon",
    consumer: "machine"
  };
  return Formatter;
}(abstractFormatter_1.AbstractFormatter));
exports.Formatter = Formatter;
var _a;
