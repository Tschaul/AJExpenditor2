/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var abstractFormatter_1 = require('../language/formatter/abstractFormatter');
var Utils = require('../utils');
var Formatter = (function(_super) {
  tslib_1.__extends(Formatter, _super);
  function Formatter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Formatter.prototype.format = function(failures) {
    var failuresJSON = failures.map(function(failure) {
      return failure.toJson();
    });
    return JSON.stringify(failuresJSON);
  };
  Formatter.metadata = {
    formatterName: "json",
    description: "Formats errors as simple JSON.",
    sample: (_a = ["\n        [\n            {\n                \"endPosition\": {\n                    \"character\": 13,\n                    \"line\": 0,\n                    \"position\": 13\n                },\n                \"failure\": \"Missing semicolon\",\n                \"fix\": {\n                    \"innerStart\": 13,\n                    \"innerLength\": 0,\n                    \"innerText\": \";\"\n                },\n                \"name\": \"myFile.ts\",\n                \"ruleName\": \"semicolon\",\n                \"startPosition\": {\n                    \"character\": 13,\n                    \"line\": 0,\n                    \"position\": 13\n                }\n            }\n        ]"], _a.raw = ["\n        [\n            {\n                \"endPosition\": {\n                    \"character\": 13,\n                    \"line\": 0,\n                    \"position\": 13\n                },\n                \"failure\": \"Missing semicolon\",\n                \"fix\": {\n                    \"innerStart\": 13,\n                    \"innerLength\": 0,\n                    \"innerText\": \";\"\n                },\n                \"name\": \"myFile.ts\",\n                \"ruleName\": \"semicolon\",\n                \"startPosition\": {\n                    \"character\": 13,\n                    \"line\": 0,\n                    \"position\": 13\n                }\n            }\n        ]"], Utils.dedent(_a)),
    consumer: "machine"
  };
  return Formatter;
}(abstractFormatter_1.AbstractFormatter));
exports.Formatter = Formatter;
var _a;
