/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var abstractFormatter_1 = require('../language/formatter/abstractFormatter');
var codeFrame = require('../../../babel-code-frame/lib/index');
var colors = require('../../../colors/lib/index');
var Utils = require('../utils');
var Formatter = (function(_super) {
  tslib_1.__extends(Formatter, _super);
  function Formatter() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Formatter.prototype.format = function(failures) {
    if (typeof failures[0] === "undefined") {
      return "\n";
    }
    var outputLines = [];
    var currentFile;
    for (var _i = 0,
        failures_1 = failures; _i < failures_1.length; _i++) {
      var failure = failures_1[_i];
      var fileName = failure.getFileName();
      if (currentFile !== fileName) {
        outputLines.push("");
        outputLines.push(fileName);
        currentFile = fileName;
      }
      var failureString = failure.getFailure();
      failureString = colors.red(failureString);
      var ruleName = failure.getRuleName();
      ruleName = colors.gray("(" + ruleName + ")");
      var lineAndCharacter = failure.getStartPosition().getLineAndCharacter();
      var frame = codeFrame(failure.getRawLines(), lineAndCharacter.line + 1, lineAndCharacter.character, {
        forceColor: colors.enabled,
        highlightCode: true
      });
      outputLines.push(failureString + " " + ruleName);
      outputLines.push(frame);
      outputLines.push("");
    }
    if (outputLines[0] === "") {
      outputLines.shift();
    }
    return outputLines.join("\n") + "\n";
  };
  Formatter.metadata = {
    formatterName: "codeFrame",
    description: "Framed formatter which creates a frame of error code.",
    descriptionDetails: (_a = ["\n            Prints syntax highlighted code in a frame with a pointer to where\n            exactly lint error is happening."], _a.raw = ["\n            Prints syntax highlighted code in a frame with a pointer to where\n            exactly lint error is happening."], Utils.dedent(_a)),
    sample: (_b = ["\n            src/components/Payment.tsx\n            Parentheses are required around the parameters of an arrow function definition (arrow-parens)\n              21 |     public componentDidMount() {\n              22 |         this.input.focus();\n            > 23 |         loadStripe().then(Stripe => Stripe.pay());\n                 |                          ^\n              24 |     }\n              25 |\n              26 |     public render() {"], _b.raw = ["\n            src/components/Payment.tsx\n            Parentheses are required around the parameters of an arrow function definition (arrow-parens)\n              21 |     public componentDidMount() {\n              22 |         this.input.focus();\n            > 23 |         loadStripe().then(Stripe => Stripe.pay());\n                 |                          ^\n              24 |     }\n              25 |\n              26 |     public render() {"], Utils.dedent(_b)),
    consumer: "human"
  };
  return Formatter;
}(abstractFormatter_1.AbstractFormatter));
exports.Formatter = Formatter;
var _a,
    _b;
