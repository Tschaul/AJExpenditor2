/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-any",
    description: "Disallows usages of `any` as a type declaration.",
    hasFix: false,
    rationale: "Using `any` as a type declaration nullifies the compile-time benefits of the type system.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "typescript",
    typescriptOnly: true
  };
  Rule.FAILURE_STRING = "Type declaration of 'any' loses type-safety. " + "Consider replacing it with a more precise type, the empty type ('{}'), " + "or suppress this occurrence.";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (node.kind === ts.SyntaxKind.AnyKeyword) {
      var start = node.end - 3;
      return ctx.addFailure(start, node.end, Rule.FAILURE_STRING, new Lint.Replacement(start, 3, "{}"));
    }
    return ts.forEachChild(node, cb);
  });
}
