/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var utils = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithFunction(sourceFile, walk);
  };
  Rule.metadata = {
    ruleName: "no-invalid-template-strings",
    description: "Warns on use of `${` in non-template strings.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "functionality",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Interpolation will only work for template strings.";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  return ts.forEachChild(ctx.sourceFile, function cb(node) {
    if (utils.isStringLiteral(node)) {
      check(node);
    }
    return ts.forEachChild(node, cb);
  });
  function check(node) {
    var idx = node.text.search(/\$\{/);
    if (idx !== -1) {
      var textStart = node.getStart() + 1;
      ctx.addFailureAt(textStart + idx, 2, Rule.FAILURE_STRING);
    }
  }
}
