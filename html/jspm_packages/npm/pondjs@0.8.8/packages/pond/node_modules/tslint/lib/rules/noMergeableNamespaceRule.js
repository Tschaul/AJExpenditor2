/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.failureStringFactory = function(name, seenBeforeLine) {
    return "Mergeable namespace '" + name + "' found. Merge its contents with the namespace on line " + seenBeforeLine + ".";
  };
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithWalker(new Walker(sourceFile, this.ruleName, undefined));
  };
  Rule.metadata = {
    ruleName: "no-mergeable-namespace",
    description: "Disallows mergeable namespaces in the same file.",
    optionsDescription: "Not configurable.",
    options: null,
    optionExamples: [true],
    type: "maintainability",
    typescriptOnly: true
  };
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var Walker = (function(_super) {
  tslib_1.__extends(Walker, _super);
  function Walker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Walker.prototype.walk = function(node) {
    return this.checkStatements(node.statements);
  };
  Walker.prototype.checkStatements = function(statements) {
    var seen = new Map();
    for (var _i = 0,
        statements_1 = statements; _i < statements_1.length; _i++) {
      var statement = statements_1[_i];
      if (statement.kind !== ts.SyntaxKind.ModuleDeclaration) {
        continue;
      }
      var name = statement.name;
      if (name.kind === ts.SyntaxKind.Identifier) {
        var text = name.text;
        var prev = seen.get(text);
        if (prev !== undefined) {
          this.addFailureAtNode(name, Rule.failureStringFactory(text, this.getLineOfNode(prev.name)));
        }
        seen.set(text, statement);
      }
      this.checkModuleDeclaration(statement);
    }
  };
  Walker.prototype.checkModuleDeclaration = function(decl) {
    var body = decl.body;
    if (body === undefined) {
      return;
    }
    switch (body.kind) {
      case ts.SyntaxKind.ModuleBlock:
        this.checkStatements(body.statements);
        break;
      case ts.SyntaxKind.ModuleDeclaration:
        this.checkModuleDeclaration(body);
    }
  };
  Walker.prototype.getLineOfNode = function(node) {
    return ts.getLineAndCharacterOfPosition(this.sourceFile, node.pos).line + 1;
  };
  return Walker;
}(Lint.AbstractWalker));
