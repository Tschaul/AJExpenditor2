/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var tsutils_1 = require('../../../tsutils/index');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    return this.applyWithWalker(new NewlineBeforeReturnWalker(sourceFile, this.ruleName, undefined));
  };
  Rule.metadata = {
    ruleName: "newline-before-return",
    description: "Enforces blank line before return when not the only line in the block.",
    rationale: "Helps maintain a readable style in your codebase.",
    optionsDescription: "Not configurable.",
    options: {},
    optionExamples: [true],
    type: "style",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING = "Missing blank line before return";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var NewlineBeforeReturnWalker = (function(_super) {
  tslib_1.__extends(NewlineBeforeReturnWalker, _super);
  function NewlineBeforeReturnWalker() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  NewlineBeforeReturnWalker.prototype.walk = function(sourceFile) {
    var _this = this;
    var cb = function(node) {
      if (node.kind === ts.SyntaxKind.ReturnStatement) {
        _this.visitReturnStatement(node);
      }
      return ts.forEachChild(node, cb);
    };
    return ts.forEachChild(sourceFile, cb);
  };
  NewlineBeforeReturnWalker.prototype.visitReturnStatement = function(node) {
    var prev = tsutils_1.getPreviousStatement(node);
    if (prev === undefined) {
      return;
    }
    var start = node.getStart(this.sourceFile);
    var line = ts.getLineAndCharacterOfPosition(this.sourceFile, start).line;
    var comments = ts.getLeadingCommentRanges(this.sourceFile.text, node.pos);
    if (comments !== undefined) {
      for (var i = comments.length - 1; i >= 0; --i) {
        var endLine = ts.getLineAndCharacterOfPosition(this.sourceFile, comments[i].end).line;
        if (endLine < line - 1) {
          return;
        }
        start = comments[i].pos;
        line = ts.getLineAndCharacterOfPosition(this.sourceFile, start).line;
      }
    }
    var prevLine = ts.getLineAndCharacterOfPosition(this.sourceFile, prev.end).line;
    if (prevLine >= line - 1) {
      this.addFailure(start, start, Rule.FAILURE_STRING);
    }
  };
  return NewlineBeforeReturnWalker;
}(Lint.AbstractWalker));
