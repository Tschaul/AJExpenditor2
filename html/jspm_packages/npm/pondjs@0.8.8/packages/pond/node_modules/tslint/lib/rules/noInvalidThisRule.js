/* */ 
"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var tslib_1 = require('../../../tslib/tslib');
var ts = require('../../../typescript/lib/typescript');
var Lint = require('../index');
var OPTION_FUNCTION_IN_METHOD = "check-function-in-method";
var DEPRECATED_OPTION_FUNCTION_IN_METHOD = "no-this-in-function-in-method";
var Rule = (function(_super) {
  tslib_1.__extends(Rule, _super);
  function Rule() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Rule.prototype.apply = function(sourceFile) {
    var _this = this;
    var hasOption = function(name) {
      return _this.ruleArguments.indexOf(name) !== -1;
    };
    var checkFuncInMethod = hasOption(DEPRECATED_OPTION_FUNCTION_IN_METHOD) || hasOption(OPTION_FUNCTION_IN_METHOD);
    return this.applyWithFunction(sourceFile, walk, checkFuncInMethod);
  };
  Rule.metadata = {
    ruleName: "no-invalid-this",
    description: "Disallows using the `this` keyword outside of classes.",
    rationale: "See [the rule's author's rationale here.](https://github.com/palantir/tslint/pull/1105#issue-147549402)",
    optionsDescription: (_a = ["\n            One argument may be optionally provided:\n\n            * `", "` disallows using the `this` keyword in functions within class methods."], _a.raw = ["\n            One argument may be optionally provided:\n\n            * \\`", "\\` disallows using the \\`this\\` keyword in functions within class methods."], Lint.Utils.dedent(_a, OPTION_FUNCTION_IN_METHOD)),
    options: {
      type: "array",
      items: {
        type: "string",
        enum: [OPTION_FUNCTION_IN_METHOD]
      },
      minLength: 0,
      maxLength: 1
    },
    optionExamples: [true, [true, OPTION_FUNCTION_IN_METHOD]],
    type: "functionality",
    typescriptOnly: false
  };
  Rule.FAILURE_STRING_OUTSIDE = "the \"this\" keyword is disallowed outside of a class body";
  Rule.FAILURE_STRING_INSIDE = "the \"this\" keyword is disallowed in function bodies inside class methods, " + "use arrow functions instead";
  return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
function walk(ctx) {
  var sourceFile = ctx.sourceFile,
      checkFuncInMethod = ctx.options;
  var inClass = false;
  var inFunctionInClass = false;
  ts.forEachChild(sourceFile, function cb(node) {
    switch (node.kind) {
      case ts.SyntaxKind.ClassDeclaration:
      case ts.SyntaxKind.ClassExpression:
        if (!inClass) {
          inClass = true;
          ts.forEachChild(node, cb);
          inClass = false;
          return;
        }
        break;
      case ts.SyntaxKind.FunctionDeclaration:
      case ts.SyntaxKind.FunctionExpression:
        if (inClass) {
          inFunctionInClass = true;
          ts.forEachChild(node, cb);
          inFunctionInClass = false;
          return;
        }
        break;
      case ts.SyntaxKind.ThisKeyword:
        if (!inClass) {
          ctx.addFailureAtNode(node, Rule.FAILURE_STRING_OUTSIDE);
        } else if (checkFuncInMethod && inFunctionInClass) {
          ctx.addFailureAtNode(node, Rule.FAILURE_STRING_INSIDE);
        }
        return;
    }
    ts.forEachChild(node, cb);
  });
}
var _a;
