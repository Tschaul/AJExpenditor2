/* */ 
(function(process) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var _babylon = require('../../babylon/lib/index');
  var babylon = _interopRequireWildcard(_babylon);
  var _babelTypes = require('../../babel-types/lib/index');
  var t = _interopRequireWildcard(_babelTypes);
  var _babelTraverse = require('../../babel-traverse/lib/index');
  var _babelTraverse2 = _interopRequireDefault(_babelTraverse);
  var _babelGenerator = require('../../babel-generator/lib/index');
  var _babelGenerator2 = _interopRequireDefault(_babelGenerator);
  var _visitor = require('./visitor');
  var _visitor2 = _interopRequireDefault(_visitor);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function defaultOpts() {
    return {
      coverageVariable: "__coverage__",
      preserveComments: false,
      compact: true,
      esModules: false,
      autoWrap: false,
      produceSourceMap: false,
      sourceMapUrlCallback: null,
      debug: false
    };
  }
  var Instrumenter = function() {
    function Instrumenter() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOpts();
      _classCallCheck(this, Instrumenter);
      this.opts = this.normalizeOpts(opts);
      this.fileCoverage = null;
      this.sourceMap = null;
    }
    _createClass(Instrumenter, [{
      key: 'normalizeOpts',
      value: function normalizeOpts(opts) {
        var normalize = function normalize(name, defaultValue) {
          if (!opts.hasOwnProperty(name)) {
            opts[name] = defaultValue;
          }
        };
        var defOpts = defaultOpts();
        Object.keys(defOpts).forEach(function(k) {
          normalize(k, defOpts[k]);
        });
        return opts;
      }
    }, {
      key: 'instrumentSync',
      value: function instrumentSync(code, filename, inputSourceMap) {
        if (typeof code !== 'string') {
          throw new Error('Code must be a string');
        }
        filename = filename || String(new Date().getTime()) + '.js';
        var opts = this.opts;
        var ast = babylon.parse(code, {
          allowReturnOutsideFunction: opts.autoWrap,
          sourceType: opts.esModules ? "module" : "script",
          plugins: ['asyncGenerators', 'dynamicImport', 'flow', 'jsx']
        });
        var ee = (0, _visitor2.default)(t, filename, {
          coverageVariable: opts.coverageVariable,
          inputSourceMap: inputSourceMap
        });
        var output = {};
        var visitor = {Program: {
            enter: ee.enter,
            exit: function exit(path) {
              output = ee.exit(path);
            }
          }};
        (0, _babelTraverse2.default)(ast, visitor);
        var generateOptions = {
          compact: opts.compact,
          sourceMaps: opts.produceSourceMap,
          sourceFileName: filename
        };
        var codeMap = (0, _babelGenerator2.default)(ast, generateOptions, code);
        this.fileCoverage = output.fileCoverage;
        this.sourceMap = codeMap.map;
        var cb = this.opts.sourceMapUrlCallback;
        if (cb && output.sourceMappingURL) {
          cb(filename, output.sourceMappingURL);
        }
        return codeMap.code;
      }
    }, {
      key: 'instrument',
      value: function instrument(code, filename, callback, inputSourceMap) {
        if (!callback && typeof filename === 'function') {
          callback = filename;
          filename = null;
        }
        try {
          var out = this.instrumentSync(code, filename, inputSourceMap);
          callback(null, out);
        } catch (ex) {
          callback(ex);
        }
      }
    }, {
      key: 'lastFileCoverage',
      value: function lastFileCoverage() {
        return this.fileCoverage;
      }
    }, {
      key: 'lastSourceMap',
      value: function lastSourceMap() {
        return this.sourceMap;
      }
    }]);
    return Instrumenter;
  }();
  exports.default = Instrumenter;
})(require('process'));
