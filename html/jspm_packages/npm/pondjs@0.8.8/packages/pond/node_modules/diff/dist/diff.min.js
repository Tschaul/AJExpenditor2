/* */ 
"format cjs";
(function(process) {
  !function(a, b) {
    "object" == typeof exports && "object" == typeof module ? module.exports = b() : "function" == typeof define && define.amd ? define([], b) : "object" == typeof exports ? exports.JsDiff = b() : a.JsDiff = b();
  }(this, function() {
    return function(a) {
      function b(d) {
        if (c[d])
          return c[d].exports;
        var e = c[d] = {
          exports: {},
          id: d,
          loaded: !1
        };
        return a[d].call(e.exports, e, e.exports, b), e.loaded = !0, e.exports;
      }
      var c = {};
      return b.m = a, b.c = c, b.p = "", b(0);
    }([function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      b.__esModule = !0, b.canonicalize = b.convertChangesToXML = b.convertChangesToDMP = b.merge = b.parsePatch = b.applyPatches = b.applyPatch = b.createPatch = b.createTwoFilesPatch = b.structuredPatch = b.diffArrays = b.diffJson = b.diffCss = b.diffSentences = b.diffTrimmedLines = b.diffLines = b.diffWordsWithSpace = b.diffWords = b.diffChars = b.Diff = void 0;
      var e = c(1),
          f = d(e),
          g = c(2),
          h = c(3),
          i = c(5),
          j = c(6),
          k = c(7),
          l = c(8),
          m = c(9),
          n = c(10),
          o = c(11),
          p = c(13),
          q = c(14),
          r = c(16),
          s = c(17);
      b.Diff = f["default"], b.diffChars = g.diffChars, b.diffWords = h.diffWords, b.diffWordsWithSpace = h.diffWordsWithSpace, b.diffLines = i.diffLines, b.diffTrimmedLines = i.diffTrimmedLines, b.diffSentences = j.diffSentences, b.diffCss = k.diffCss, b.diffJson = l.diffJson, b.diffArrays = m.diffArrays, b.structuredPatch = q.structuredPatch, b.createTwoFilesPatch = q.createTwoFilesPatch, b.createPatch = q.createPatch, b.applyPatch = n.applyPatch, b.applyPatches = n.applyPatches, b.parsePatch = o.parsePatch, b.merge = p.merge, b.convertChangesToDMP = r.convertChangesToDMP, b.convertChangesToXML = s.convertChangesToXML, b.canonicalize = l.canonicalize;
    }, function(a, b) {
      "use strict";
      function c() {}
      function d(a, b, c, d, e) {
        for (var f = 0,
            g = b.length,
            h = 0,
            i = 0; f < g; f++) {
          var j = b[f];
          if (j.removed) {
            if (j.value = a.join(d.slice(i, i + j.count)), i += j.count, f && b[f - 1].added) {
              var k = b[f - 1];
              b[f - 1] = b[f], b[f] = k;
            }
          } else {
            if (!j.added && e) {
              var l = c.slice(h, h + j.count);
              l = l.map(function(a, b) {
                var c = d[i + b];
                return c.length > a.length ? c : a;
              }), j.value = a.join(l);
            } else
              j.value = a.join(c.slice(h, h + j.count));
            h += j.count, j.added || (i += j.count);
          }
        }
        var m = b[g - 1];
        return g > 1 && (m.added || m.removed) && a.equals("", m.value) && (b[g - 2].value += m.value, b.pop()), b;
      }
      function e(a) {
        return {
          newPos: a.newPos,
          components: a.components.slice(0)
        };
      }
      b.__esModule = !0, b["default"] = c, c.prototype = {
        diff: function(a, b) {
          function c(a) {
            return h ? (setTimeout(function() {
              h(void 0, a);
            }, 0), !0) : a;
          }
          function f() {
            for (var f = -1 * l; f <= l; f += 2) {
              var g = void 0,
                  h = n[f - 1],
                  m = n[f + 1],
                  o = (m ? m.newPos : 0) - f;
              h && (n[f - 1] = void 0);
              var p = h && h.newPos + 1 < j,
                  q = m && 0 <= o && o < k;
              if (p || q) {
                if (!p || q && h.newPos < m.newPos ? (g = e(m), i.pushComponent(g.components, void 0, !0)) : (g = h, g.newPos++, i.pushComponent(g.components, !0, void 0)), o = i.extractCommon(g, b, a, f), g.newPos + 1 >= j && o + 1 >= k)
                  return c(d(i, g.components, b, a, i.useLongestToken));
                n[f] = g;
              } else
                n[f] = void 0;
            }
            l++;
          }
          var g = arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2],
              h = g.callback;
          "function" == typeof g && (h = g, g = {}), this.options = g;
          var i = this;
          a = this.castInput(a), b = this.castInput(b), a = this.removeEmpty(this.tokenize(a)), b = this.removeEmpty(this.tokenize(b));
          var j = b.length,
              k = a.length,
              l = 1,
              m = j + k,
              n = [{
                newPos: -1,
                components: []
              }],
              o = this.extractCommon(n[0], b, a, 0);
          if (n[0].newPos + 1 >= j && o + 1 >= k)
            return c([{
              value: this.join(b),
              count: b.length
            }]);
          if (h)
            !function q() {
              setTimeout(function() {
                return l > m ? h() : void(f() || q());
              }, 0);
            }();
          else
            for (; l <= m; ) {
              var p = f();
              if (p)
                return p;
            }
        },
        pushComponent: function(a, b, c) {
          var d = a[a.length - 1];
          d && d.added === b && d.removed === c ? a[a.length - 1] = {
            count: d.count + 1,
            added: b,
            removed: c
          } : a.push({
            count: 1,
            added: b,
            removed: c
          });
        },
        extractCommon: function(a, b, c, d) {
          for (var e = b.length,
              f = c.length,
              g = a.newPos,
              h = g - d,
              i = 0; g + 1 < e && h + 1 < f && this.equals(b[g + 1], c[h + 1]); )
            g++, h++, i++;
          return i && a.components.push({count: i}), a.newPos = g, h;
        },
        equals: function(a, b) {
          return a === b || this.options.ignoreCase && a.toLowerCase() === b.toLowerCase();
        },
        removeEmpty: function(a) {
          for (var b = [],
              c = 0; c < a.length; c++)
            a[c] && b.push(a[c]);
          return b;
        },
        castInput: function(a) {
          return a;
        },
        tokenize: function(a) {
          return a.split("");
        },
        join: function(a) {
          return a.join("");
        }
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return h.diff(a, b, c);
      }
      b.__esModule = !0, b.characterDiff = void 0, b.diffChars = e;
      var f = c(1),
          g = d(f),
          h = b.characterDiff = new g["default"];
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return c = (0, i.generateOptions)(c, {ignoreWhitespace: !0}), l.diff(a, b, c);
      }
      function f(a, b, c) {
        return l.diff(a, b, c);
      }
      b.__esModule = !0, b.wordDiff = void 0, b.diffWords = e, b.diffWordsWithSpace = f;
      var g = c(1),
          h = d(g),
          i = c(4),
          j = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/,
          k = /\S/,
          l = b.wordDiff = new h["default"];
      l.equals = function(a, b) {
        return this.options.ignoreCase && (a = a.toLowerCase(), b = b.toLowerCase()), a === b || this.options.ignoreWhitespace && !k.test(a) && !k.test(b);
      }, l.tokenize = function(a) {
        for (var b = a.split(/(\s+|\b)/),
            c = 0; c < b.length - 1; c++)
          !b[c + 1] && b[c + 2] && j.test(b[c]) && j.test(b[c + 2]) && (b[c] += b[c + 2], b.splice(c + 1, 2), c--);
        return b;
      };
    }, function(a, b) {
      "use strict";
      function c(a, b) {
        if ("function" == typeof a)
          b.callback = a;
        else if (a)
          for (var c in a)
            a.hasOwnProperty(c) && (b[c] = a[c]);
        return b;
      }
      b.__esModule = !0, b.generateOptions = c;
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return j.diff(a, b, c);
      }
      function f(a, b, c) {
        var d = (0, i.generateOptions)(c, {ignoreWhitespace: !0});
        return j.diff(a, b, d);
      }
      b.__esModule = !0, b.lineDiff = void 0, b.diffLines = e, b.diffTrimmedLines = f;
      var g = c(1),
          h = d(g),
          i = c(4),
          j = b.lineDiff = new h["default"];
      j.tokenize = function(a) {
        var b = [],
            c = a.split(/(\n|\r\n)/);
        c[c.length - 1] || c.pop();
        for (var d = 0; d < c.length; d++) {
          var e = c[d];
          d % 2 && !this.options.newlineIsToken ? b[b.length - 1] += e : (this.options.ignoreWhitespace && (e = e.trim()), b.push(e));
        }
        return b;
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return h.diff(a, b, c);
      }
      b.__esModule = !0, b.sentenceDiff = void 0, b.diffSentences = e;
      var f = c(1),
          g = d(f),
          h = b.sentenceDiff = new g["default"];
      h.tokenize = function(a) {
        return a.split(/(\S.+?[.!?])(?=\s+|$)/);
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return h.diff(a, b, c);
      }
      b.__esModule = !0, b.cssDiff = void 0, b.diffCss = e;
      var f = c(1),
          g = d(f),
          h = b.cssDiff = new g["default"];
      h.tokenize = function(a) {
        return a.split(/([{}:;,]|\s+)/);
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return l.diff(a, b, c);
      }
      function f(a, b, c) {
        b = b || [], c = c || [];
        var d = void 0;
        for (d = 0; d < b.length; d += 1)
          if (b[d] === a)
            return c[d];
        var e = void 0;
        if ("[object Array]" === k.call(a)) {
          for (b.push(a), e = new Array(a.length), c.push(e), d = 0; d < a.length; d += 1)
            e[d] = f(a[d], b, c);
          return b.pop(), c.pop(), e;
        }
        if (a && a.toJSON && (a = a.toJSON()), "object" === ("undefined" == typeof a ? "undefined" : g(a)) && null !== a) {
          b.push(a), e = {}, c.push(e);
          var h = [],
              i = void 0;
          for (i in a)
            a.hasOwnProperty(i) && h.push(i);
          for (h.sort(), d = 0; d < h.length; d += 1)
            i = h[d], e[i] = f(a[i], b, c);
          b.pop(), c.pop();
        } else
          e = a;
        return e;
      }
      b.__esModule = !0, b.jsonDiff = void 0;
      var g = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
        return typeof a;
      } : function(a) {
        return a && "function" == typeof Symbol && a.constructor === Symbol ? "symbol" : typeof a;
      };
      b.diffJson = e, b.canonicalize = f;
      var h = c(1),
          i = d(h),
          j = c(5),
          k = Object.prototype.toString,
          l = b.jsonDiff = new i["default"];
      l.useLongestToken = !0, l.tokenize = j.lineDiff.tokenize, l.castInput = function(a) {
        var b = this.options.undefinedReplacement;
        return "string" == typeof a ? a : JSON.stringify(f(a), function(a, c) {
          return "undefined" == typeof c ? b : c;
        }, "  ");
      }, l.equals = function(a, b) {
        return i["default"].prototype.equals.call(l, a.replace(/,([\r\n])/g, "$1"), b.replace(/,([\r\n])/g, "$1"));
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b, c) {
        return h.diff(a, b, c);
      }
      b.__esModule = !0, b.arrayDiff = void 0, b.diffArrays = e;
      var f = c(1),
          g = d(f),
          h = b.arrayDiff = new g["default"];
      h.tokenize = h.join = function(a) {
        return a.slice();
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        return a && a.__esModule ? a : {"default": a};
      }
      function e(a, b) {
        function c(a, b) {
          for (var c = 0; c < a.lines.length; c++) {
            var d = a.lines[c],
                f = d[0],
                g = d.substr(1);
            if (" " === f || "-" === f) {
              if (!j(b + 1, e[b], f, g) && (k++, k > l))
                return !1;
              b++;
            }
          }
          return !0;
        }
        var d = arguments.length <= 2 || void 0 === arguments[2] ? {} : arguments[2];
        if ("string" == typeof b && (b = (0, g.parsePatch)(b)), Array.isArray(b)) {
          if (b.length > 1)
            throw new Error("applyPatch only works with a single input.");
          b = b[0];
        }
        for (var e = a.split(/\r\n|[\n\v\f\r\x85]/),
            f = a.match(/\r\n|[\n\v\f\r\x85]/g) || [],
            h = b.hunks,
            j = d.compareLine || function(a, b, c, d) {
              return b === d;
            },
            k = 0,
            l = d.fuzzFactor || 0,
            m = 0,
            n = 0,
            o = void 0,
            p = void 0,
            q = 0; q < h.length; q++) {
          for (var r = h[q],
              s = e.length - r.oldLines,
              t = 0,
              u = n + r.oldStart - 1,
              v = (0, i["default"])(u, m, s); void 0 !== t; t = v())
            if (c(r, u + t)) {
              r.offset = n += t;
              break;
            }
          if (void 0 === t)
            return !1;
          m = r.offset + r.oldStart + r.oldLines;
        }
        for (var w = 0,
            x = 0; x < h.length; x++) {
          var y = h[x],
              z = y.oldStart + y.offset + w - 1;
          w += y.newLines - y.oldLines;
          for (var A = 0; A < y.lines.length; A++) {
            var B = y.lines[A],
                C = B[0],
                D = B.substr(1),
                E = y.linedelimiters[A];
            if (" " === C)
              z++;
            else if ("-" === C)
              e.splice(z, 1), f.splice(z, 1);
            else if ("+" === C)
              e.splice(z, 0, D), f.splice(z, 0, E), z++;
            else if ("\\" === C) {
              var F = y.lines[A - 1] ? y.lines[A - 1][0] : null;
              "+" === F ? o = !0 : "-" === F && (p = !0);
            }
          }
        }
        if (o)
          for (; !e[e.length - 1]; )
            e.pop(), f.pop();
        else
          p && (e.push(""), f.push("\n"));
        for (var G = 0; G < e.length - 1; G++)
          e[G] = e[G] + f[G];
        return e.join("");
      }
      function f(a, b) {
        function c() {
          var f = a[d++];
          return f ? void b.loadFile(f, function(a, d) {
            if (a)
              return b.complete(a);
            var g = e(d, f, b);
            b.patched(f, g, function(a) {
              return a ? b.complete(a) : void c();
            });
          }) : b.complete();
        }
        "string" == typeof a && (a = (0, g.parsePatch)(a));
        var d = 0;
        c();
      }
      b.__esModule = !0, b.applyPatch = e, b.applyPatches = f;
      var g = c(11),
          h = c(12),
          i = d(h);
    }, function(a, b) {
      "use strict";
      function c(a) {
        function b() {
          var a = {};
          for (h.push(a); i < f.length; ) {
            var b = f[i];
            if (/^(\-\-\-|\+\+\+|@@)\s/.test(b))
              break;
            var g = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(b);
            g && (a.index = g[1]), i++;
          }
          for (c(a), c(a), a.hunks = []; i < f.length; ) {
            var j = f[i];
            if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(j))
              break;
            if (/^@@/.test(j))
              a.hunks.push(d());
            else {
              if (j && e.strict)
                throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(j));
              i++;
            }
          }
        }
        function c(a) {
          var b = /^(---|\+\+\+)\s+([\S ]*)(?:\t(.*?)\s*)?$/,
              c = b.exec(f[i]);
          if (c) {
            var d = "---" === c[1] ? "old" : "new",
                e = c[2].replace(/\\\\/g, "\\");
            /^".*"$/.test(e) && (e = e.substr(1, e.length - 2)), a[d + "FileName"] = e, a[d + "Header"] = c[3], i++;
          }
        }
        function d() {
          for (var a = i,
              b = f[i++],
              c = b.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),
              d = {
                oldStart: +c[1],
                oldLines: +c[2] || 1,
                newStart: +c[3],
                newLines: +c[4] || 1,
                lines: [],
                linedelimiters: []
              },
              h = 0,
              j = 0; i < f.length && !(0 === f[i].indexOf("--- ") && i + 2 < f.length && 0 === f[i + 1].indexOf("+++ ") && 0 === f[i + 2].indexOf("@@")); i++) {
            var k = f[i][0];
            if ("+" !== k && "-" !== k && " " !== k && "\\" !== k)
              break;
            d.lines.push(f[i]), d.linedelimiters.push(g[i] || "\n"), "+" === k ? h++ : "-" === k ? j++ : " " === k && (h++, j++);
          }
          if (h || 1 !== d.newLines || (d.newLines = 0), j || 1 !== d.oldLines || (d.oldLines = 0), e.strict) {
            if (h !== d.newLines)
              throw new Error("Added line count did not match for hunk at line " + (a + 1));
            if (j !== d.oldLines)
              throw new Error("Removed line count did not match for hunk at line " + (a + 1));
          }
          return d;
        }
        for (var e = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
            f = a.split(/\r\n|[\n\v\f\r\x85]/),
            g = a.match(/\r\n|[\n\v\f\r\x85]/g) || [],
            h = [],
            i = 0; i < f.length; )
          b();
        return h;
      }
      b.__esModule = !0, b.parsePatch = c;
    }, function(a, b) {
      "use strict";
      b.__esModule = !0, b["default"] = function(a, b, c) {
        var d = !0,
            e = !1,
            f = !1,
            g = 1;
        return function h() {
          if (d && !f) {
            if (e ? g++ : d = !1, a + g <= c)
              return g;
            f = !0;
          }
          if (!e)
            return f || (d = !0), b <= a - g ? -g++ : (e = !0, h());
        };
      };
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        if (Array.isArray(a)) {
          for (var b = 0,
              c = Array(a.length); b < a.length; b++)
            c[b] = a[b];
          return c;
        }
        return Array.from(a);
      }
      function e(a) {
        var b = !1;
        a.oldLines = 0, a.newLines = 0, a.lines.forEach(function(c) {
          return "string" != typeof c ? void(b = !0) : ("+" !== c[0] && " " !== c[0] || a.newLines++, void("-" !== c[0] && " " !== c[0] || a.oldLines++));
        }), b && (delete a.oldLines, delete a.newLines);
      }
      function f(a, b, c) {
        a = g(a, c), b = g(b, c);
        var d = {};
        (a.index || b.index) && (d.index = a.index || b.index), (a.newFileName || b.newFileName) && (h(a) ? h(b) ? (d.oldFileName = i(d, a.oldFileName, b.oldFileName), d.newFileName = i(d, a.newFileName, b.newFileName), d.oldHeader = i(d, a.oldHeader, b.oldHeader), d.newHeader = i(d, a.newHeader, b.newHeader)) : (d.oldFileName = a.oldFileName, d.newFileName = a.newFileName, d.oldHeader = a.oldHeader, d.newHeader = a.newHeader) : (d.oldFileName = b.oldFileName || a.oldFileName, d.newFileName = b.newFileName || a.newFileName, d.oldHeader = b.oldHeader || a.oldHeader, d.newHeader = b.newHeader || a.newHeader)), d.hunks = [];
        for (var e = 0,
            f = 0,
            m = 0,
            n = 0; e < a.hunks.length || f < b.hunks.length; ) {
          var o = a.hunks[e] || {oldStart: 1 / 0},
              p = b.hunks[f] || {oldStart: 1 / 0};
          if (j(o, p))
            d.hunks.push(k(o, m)), e++, n += o.newLines - o.oldLines;
          else if (j(p, o))
            d.hunks.push(k(p, n)), f++, m += p.newLines - p.oldLines;
          else {
            var q = {
              oldStart: Math.min(o.oldStart, p.oldStart),
              oldLines: 0,
              newStart: Math.min(o.newStart + m, p.oldStart + n),
              newLines: 0,
              lines: []
            };
            l(q, o.oldStart, o.lines, p.oldStart, p.lines), f++, e++, d.hunks.push(q);
          }
        }
        return d;
      }
      function g(a, b) {
        if ("string" == typeof a) {
          if (/^@@/m.test(a) || /^Index:/m.test(a))
            return (0, w.parsePatch)(a)[0];
          if (!b)
            throw new Error("Must provide a base reference or pass in a patch");
          return (0, v.structuredPatch)(void 0, void 0, b, a);
        }
        return a;
      }
      function h(a) {
        return a.newFileName && a.newFileName !== a.oldFileName;
      }
      function i(a, b, c) {
        return b === c ? b : (a.conflict = !0, {
          mine: b,
          theirs: c
        });
      }
      function j(a, b) {
        return a.oldStart < b.oldStart && a.oldStart + a.oldLines < b.oldStart;
      }
      function k(a, b) {
        return {
          oldStart: a.oldStart,
          oldLines: a.oldLines,
          newStart: a.newStart + b,
          newLines: a.newLines,
          lines: a.lines
        };
      }
      function l(a, b, c, f, g) {
        var h = {
          offset: b,
          lines: c,
          index: 0
        },
            i = {
              offset: f,
              lines: g,
              index: 0
            };
        for (p(a, h, i), p(a, i, h); h.index < h.lines.length && i.index < i.lines.length; ) {
          var j = h.lines[h.index],
              k = i.lines[i.index];
          if ("-" !== j[0] && "+" !== j[0] || "-" !== k[0] && "+" !== k[0])
            if ("+" === j[0] && " " === k[0]) {
              var l;
              (l = a.lines).push.apply(l, d(r(h)));
            } else if ("+" === k[0] && " " === j[0]) {
              var s;
              (s = a.lines).push.apply(s, d(r(i)));
            } else
              "-" === j[0] && " " === k[0] ? n(a, h, i) : "-" === k[0] && " " === j[0] ? n(a, i, h, !0) : j === k ? (a.lines.push(j), h.index++, i.index++) : o(a, r(h), r(i));
          else
            m(a, h, i);
        }
        q(a, h), q(a, i), e(a);
      }
      function m(a, b, c) {
        var e = r(b),
            f = r(c);
        if (t(e) && t(f)) {
          if ((0, x.arrayStartsWith)(e, f) && u(c, e, e.length - f.length)) {
            var g;
            return void(g = a.lines).push.apply(g, d(e));
          }
          if ((0, x.arrayStartsWith)(f, e) && u(b, f, f.length - e.length)) {
            var h;
            return void(h = a.lines).push.apply(h, d(f));
          }
        } else if ((0, x.arrayEqual)(e, f)) {
          var i;
          return void(i = a.lines).push.apply(i, d(e));
        }
        o(a, e, f);
      }
      function n(a, b, c, e) {
        var f = r(b),
            g = s(c, f);
        if (g.merged) {
          var h;
          (h = a.lines).push.apply(h, d(g.merged));
        } else
          o(a, e ? g : f, e ? f : g);
      }
      function o(a, b, c) {
        a.conflict = !0, a.lines.push({
          conflict: !0,
          mine: b,
          theirs: c
        });
      }
      function p(a, b, c) {
        for (; b.offset < c.offset && b.index < b.lines.length; ) {
          var d = b.lines[b.index++];
          a.lines.push(d), b.offset++;
        }
      }
      function q(a, b) {
        for (; b.index < b.lines.length; ) {
          var c = b.lines[b.index++];
          a.lines.push(c);
        }
      }
      function r(a) {
        for (var b = [],
            c = a.lines[a.index][0]; a.index < a.lines.length; ) {
          var d = a.lines[a.index];
          if ("-" === c && "+" === d[0] && (c = "+"), c !== d[0])
            break;
          b.push(d), a.index++;
        }
        return b;
      }
      function s(a, b) {
        for (var c = [],
            d = [],
            e = 0,
            f = !1,
            g = !1; e < b.length && a.index < a.lines.length; ) {
          var h = a.lines[a.index],
              i = b[e];
          if ("+" === i[0])
            break;
          if (f = f || " " !== h[0], d.push(i), e++, "+" === h[0])
            for (g = !0; "+" === h[0]; )
              c.push(h), h = a.lines[++a.index];
          i.substr(1) === h.substr(1) ? (c.push(h), a.index++) : g = !0;
        }
        if ("+" === (b[e] || "")[0] && f && (g = !0), g)
          return c;
        for (; e < b.length; )
          d.push(b[e++]);
        return {
          merged: d,
          changes: c
        };
      }
      function t(a) {
        return a.reduce(function(a, b) {
          return a && "-" === b[0];
        }, !0);
      }
      function u(a, b, c) {
        for (var d = 0; d < c; d++) {
          var e = b[b.length - c + d].substr(1);
          if (a.lines[a.index + d] !== " " + e)
            return !1;
        }
        return a.index += c, !0;
      }
      b.__esModule = !0, b.calcLineCount = e, b.merge = f;
      var v = c(14),
          w = c(11),
          x = c(15);
    }, function(a, b, c) {
      "use strict";
      function d(a) {
        if (Array.isArray(a)) {
          for (var b = 0,
              c = Array(a.length); b < a.length; b++)
            c[b] = a[b];
          return c;
        }
        return Array.from(a);
      }
      function e(a, b, c, e, f, g, i) {
        function j(a) {
          return a.map(function(a) {
            return " " + a;
          });
        }
        i || (i = {}), "undefined" == typeof i.context && (i.context = 4);
        var k = (0, h.diffLines)(c, e, i);
        k.push({
          value: "",
          lines: []
        });
        for (var l = [],
            m = 0,
            n = 0,
            o = [],
            p = 1,
            q = 1,
            r = function(a) {
              var b = k[a],
                  f = b.lines || b.value.replace(/\n$/, "").split("\n");
              if (b.lines = f, b.added || b.removed) {
                var g;
                if (!m) {
                  var h = k[a - 1];
                  m = p, n = q, h && (o = i.context > 0 ? j(h.lines.slice(-i.context)) : [], m -= o.length, n -= o.length);
                }
                (g = o).push.apply(g, d(f.map(function(a) {
                  return (b.added ? "+" : "-") + a;
                }))), b.added ? q += f.length : p += f.length;
              } else {
                if (m)
                  if (f.length <= 2 * i.context && a < k.length - 2) {
                    var r;
                    (r = o).push.apply(r, d(j(f)));
                  } else {
                    var s,
                        t = Math.min(f.length, i.context);
                    (s = o).push.apply(s, d(j(f.slice(0, t))));
                    var u = {
                      oldStart: m,
                      oldLines: p - m + t,
                      newStart: n,
                      newLines: q - n + t,
                      lines: o
                    };
                    if (a >= k.length - 2 && f.length <= i.context) {
                      var v = /\n$/.test(c),
                          w = /\n$/.test(e);
                      0 != f.length || v ? v && w || o.push("\\ No newline at end of file") : o.splice(u.oldLines, 0, "\\ No newline at end of file");
                    }
                    l.push(u), m = 0, n = 0, o = [];
                  }
                p += f.length, q += f.length;
              }
            },
            s = 0; s < k.length; s++)
          r(s);
        return {
          oldFileName: a,
          newFileName: b,
          oldHeader: f,
          newHeader: g,
          hunks: l
        };
      }
      function f(a, b, c, d, f, g, h) {
        var i = e(a, b, c, d, f, g, h),
            j = [];
        a == b && j.push("Index: " + a), j.push("==================================================================="), j.push("--- " + i.oldFileName + ("undefined" == typeof i.oldHeader ? "" : "\t" + i.oldHeader)), j.push("+++ " + i.newFileName + ("undefined" == typeof i.newHeader ? "" : "\t" + i.newHeader));
        for (var k = 0; k < i.hunks.length; k++) {
          var l = i.hunks[k];
          j.push("@@ -" + l.oldStart + "," + l.oldLines + " +" + l.newStart + "," + l.newLines + " @@"), j.push.apply(j, l.lines);
        }
        return j.join("\n") + "\n";
      }
      function g(a, b, c, d, e, g) {
        return f(a, a, b, c, d, e, g);
      }
      b.__esModule = !0, b.structuredPatch = e, b.createTwoFilesPatch = f, b.createPatch = g;
      var h = c(5);
    }, function(a, b) {
      "use strict";
      function c(a, b) {
        return a.length === b.length && d(a, b);
      }
      function d(a, b) {
        if (b.length > a.length)
          return !1;
        for (var c = 0; c < b.length; c++)
          if (b[c] !== a[c])
            return !1;
        return !0;
      }
      b.__esModule = !0, b.arrayEqual = c, b.arrayStartsWith = d;
    }, function(a, b) {
      "use strict";
      function c(a) {
        for (var b = [],
            c = void 0,
            d = void 0,
            e = 0; e < a.length; e++)
          c = a[e], d = c.added ? 1 : c.removed ? -1 : 0, b.push([d, c.value]);
        return b;
      }
      b.__esModule = !0, b.convertChangesToDMP = c;
    }, function(a, b) {
      "use strict";
      function c(a) {
        for (var b = [],
            c = 0; c < a.length; c++) {
          var e = a[c];
          e.added ? b.push("<ins>") : e.removed && b.push("<del>"), b.push(d(e.value)), e.added ? b.push("</ins>") : e.removed && b.push("</del>");
        }
        return b.join("");
      }
      function d(a) {
        var b = a;
        return b = b.replace(/&/g, "&amp;"), b = b.replace(/</g, "&lt;"), b = b.replace(/>/g, "&gt;"), b = b.replace(/"/g, "&quot;");
      }
      b.__esModule = !0, b.convertChangesToXML = c;
    }]);
  });
})(require('process'));
