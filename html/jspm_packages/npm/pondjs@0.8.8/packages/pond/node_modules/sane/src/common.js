/* */ 
'use strict';
var anymatch = require('../../anymatch/index');
var minimatch = require('../../minimatch/minimatch');
exports.DEFAULT_DELAY = 100;
exports.CHANGE_EVENT = 'change';
exports.DELETE_EVENT = 'delete';
exports.ADD_EVENT = 'add';
exports.ALL_EVENT = 'all';
exports.assignOptions = function(watcher, opts) {
  opts = opts || {};
  watcher.globs = opts.glob || [];
  watcher.dot = opts.dot || false;
  watcher.ignored = opts.ignored || false;
  if (!Array.isArray(watcher.globs)) {
    watcher.globs = [watcher.globs];
  }
  watcher.hasIgnore = Boolean(opts.ignored) && !(Array.isArray(opts) && opts.length > 0);
  watcher.doIgnore = opts.ignored ? anymatch(opts.ignored) : function() {
    return false;
  };
  return opts;
};
exports.isFileIncluded = function(globs, dot, doIgnore, relativePath) {
  var matched;
  if (globs.length) {
    for (var i = 0; i < globs.length; i++) {
      if (minimatch(relativePath, globs[i], {dot: dot}) && !doIgnore(relativePath)) {
        matched = true;
        break;
      }
    }
  } else {
    matched = (dot || minimatch(relativePath, '**/*')) && !doIgnore(relativePath);
  }
  return matched;
};
