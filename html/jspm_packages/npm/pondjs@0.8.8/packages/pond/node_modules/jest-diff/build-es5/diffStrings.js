/* */ 
'use strict';
var chalk = require('../../chalk/index');
var diff = require('../../diff/lib/index');
var _require = require('./constants'),
    NO_DIFF_MESSAGE = _require.NO_DIFF_MESSAGE;
var DIFF_CONTEXT = 5;
var getColor = function getColor(added, removed) {
  return (added ? chalk.red : removed ? chalk.green : chalk.dim);
};
var getBgColor = function getBgColor(added, removed) {
  return (added ? chalk.bgRed : removed ? chalk.bgGreen : chalk.dim);
};
var highlightTrailingWhitespace = function highlightTrailingWhitespace(line, bgColor) {
  return (line.replace(/\s+$/, bgColor('$&')));
};
var getAnnotation = function getAnnotation(options) {
  return (chalk.green('- ' + (options && options.aAnnotation || 'Expected')) + '\n' + chalk.red('+ ' + (options && options.bAnnotation || 'Received')) + '\n\n');
};
var diffLines = function diffLines(a, b) {
  var isDifferent = false;
  return {
    diff: diff.diffLines(a, b).map(function(part) {
      var added = part.added,
          removed = part.removed;
      if (part.added || part.removed) {
        isDifferent = true;
      }
      var lines = part.value.split('\n');
      var color = getColor(added, removed);
      var bgColor = getBgColor(added, removed);
      if (lines[lines.length - 1] === '') {
        lines.pop();
      }
      return lines.map(function(line) {
        var highlightedLine = highlightTrailingWhitespace(line, bgColor);
        var mark = color(part.added ? '+' : part.removed ? '-' : ' ');
        return mark + ' ' + color(highlightedLine) + '\n';
      }).join('');
    }).join('').trim(),
    isDifferent: isDifferent
  };
};
var shouldShowPatchMarks = function shouldShowPatchMarks(hunk, oldLinesCount) {
  return (oldLinesCount > hunk.oldLines);
};
var createPatchMark = function createPatchMark(hunk) {
  var markOld = '-' + hunk.oldStart + ',' + hunk.oldLines;
  var markNew = '+' + hunk.newStart + ',' + hunk.newLines;
  return chalk.yellow('@@ ' + markOld + ' ' + markNew + ' @@\n');
};
var structuredPatch = function structuredPatch(a, b) {
  var options = {context: DIFF_CONTEXT};
  var isDifferent = false;
  if (!a.endsWith('\n')) {
    a += '\n';
  }
  if (!b.endsWith('\n')) {
    b += '\n';
  }
  var oldLinesCount = (a.match(/\n/g) || []).length;
  return {
    diff: diff.structuredPatch('', '', a, b, '', '', options).hunks.map(function(hunk) {
      var lines = hunk.lines.map(function(line) {
        var added = line[0] === '+';
        var removed = line[0] === '-';
        var color = getColor(added, removed);
        var bgColor = getBgColor(added, removed);
        var highlightedLine = highlightTrailingWhitespace(line, bgColor);
        return color(highlightedLine) + '\n';
      }).join('');
      isDifferent = true;
      return shouldShowPatchMarks(hunk, oldLinesCount) ? createPatchMark(hunk) + lines : lines;
    }).join('').trim(),
    isDifferent: isDifferent
  };
};
function diffStrings(a, b, options) {
  var result = options && options.expand === false ? structuredPatch(a, b) : diffLines(a, b);
  if (result.isDifferent) {
    return getAnnotation(options) + result.diff;
  } else {
    return NO_DIFF_MESSAGE;
  }
}
module.exports = diffStrings;
