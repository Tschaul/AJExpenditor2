/* */ 
'use strict';
const chalk = require('../../chalk/index');
const diff = require('../../diff/lib/index');
var _require = require('./constants');
const NO_DIFF_MESSAGE = _require.NO_DIFF_MESSAGE;
const DIFF_CONTEXT = 5;
const getColor = (added, removed) => added ? chalk.red : removed ? chalk.green : chalk.dim;
const getBgColor = (added, removed) => added ? chalk.bgRed : removed ? chalk.bgGreen : chalk.dim;
const highlightTrailingWhitespace = (line, bgColor) => line.replace(/\s+$/, bgColor('$&'));
const getAnnotation = (options) => chalk.green('- ' + (options && options.aAnnotation || 'Expected')) + '\n' + chalk.red('+ ' + (options && options.bAnnotation || 'Received')) + '\n\n';
const diffLines = (a, b) => {
  let isDifferent = false;
  return {
    diff: diff.diffLines(a, b).map((part) => {
      const added = part.added,
          removed = part.removed;
      if (part.added || part.removed) {
        isDifferent = true;
      }
      const lines = part.value.split('\n');
      const color = getColor(added, removed);
      const bgColor = getBgColor(added, removed);
      if (lines[lines.length - 1] === '') {
        lines.pop();
      }
      return lines.map((line) => {
        const highlightedLine = highlightTrailingWhitespace(line, bgColor);
        const mark = color(part.added ? '+' : part.removed ? '-' : ' ');
        return mark + ' ' + color(highlightedLine) + '\n';
      }).join('');
    }).join('').trim(),
    isDifferent
  };
};
const shouldShowPatchMarks = (hunk, oldLinesCount) => oldLinesCount > hunk.oldLines;
const createPatchMark = (hunk) => {
  const markOld = `-${hunk.oldStart},${hunk.oldLines}`;
  const markNew = `+${hunk.newStart},${hunk.newLines}`;
  return chalk.yellow(`@@ ${markOld} ${markNew} @@\n`);
};
const structuredPatch = (a, b) => {
  const options = {context: DIFF_CONTEXT};
  let isDifferent = false;
  if (!a.endsWith('\n')) {
    a += '\n';
  }
  if (!b.endsWith('\n')) {
    b += '\n';
  }
  const oldLinesCount = (a.match(/\n/g) || []).length;
  return {
    diff: diff.structuredPatch('', '', a, b, '', '', options).hunks.map((hunk) => {
      const lines = hunk.lines.map((line) => {
        const added = line[0] === '+';
        const removed = line[0] === '-';
        const color = getColor(added, removed);
        const bgColor = getBgColor(added, removed);
        const highlightedLine = highlightTrailingWhitespace(line, bgColor);
        return color(highlightedLine) + '\n';
      }).join('');
      isDifferent = true;
      return shouldShowPatchMarks(hunk, oldLinesCount) ? createPatchMark(hunk) + lines : lines;
    }).join('').trim(),
    isDifferent
  };
};
function diffStrings(a, b, options) {
  const result = options && options.expand === false ? structuredPatch(a, b) : diffLines(a, b);
  if (result.isDifferent) {
    return getAnnotation(options) + result.diff;
  } else {
    return NO_DIFF_MESSAGE;
  }
}
module.exports = diffStrings;
