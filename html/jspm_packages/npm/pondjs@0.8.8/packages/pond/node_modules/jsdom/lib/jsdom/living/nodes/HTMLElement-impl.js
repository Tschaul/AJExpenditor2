/* */ 
"use strict";
const ElementImpl = require('./Element-impl').implementation;
const MouseEvent = require('../generated/MouseEvent');
const focusing = require('../helpers/focusing');
const conversions = require('../../../../../webidl-conversions/lib/index');
const isDisabled = require('../helpers/form-controls').isDisabled;
class HTMLElementImpl extends ElementImpl {
  constructor(args, privateData) {
    super(args, privateData);
    this._tabIndex = 0;
    this._settingCssText = false;
    this._clickInProgress = false;
    this._style = new this._core.CSSStyleDeclaration((newCssText) => {
      if (!this._settingCssText) {
        this._settingCssText = true;
        this.setAttribute("style", newCssText);
        this._settingCssText = false;
      }
    });
  }
  dispatchEvent(event) {
    if (event.type === "click") {
      callEventBehaviorHook(event, "_preClickActivationSteps", this);
    }
    const outcome = super.dispatchEvent(event);
    if (event.type === "click") {
      if (event.defaultPrevented) {
        callEventBehaviorHook(event, "_canceledActivationSteps");
      } else {
        callEventBehaviorHook(event, "_activationBehavior");
      }
    }
    return outcome;
  }
  focus() {
    if (!focusing.isFocusableAreaElement(this)) {
      return;
    }
    const previous = this._ownerDocument._lastFocusedElement;
    focusing.fireFocusEventWithTargetAdjustment("blur", previous, this);
    this._ownerDocument._lastFocusedElement = this;
    focusing.fireFocusEventWithTargetAdjustment("focus", this, previous);
    if (this._ownerDocument._defaultView._frameElement) {
      this._ownerDocument._defaultView._frameElement.focus();
    }
  }
  blur() {
    if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {
      return;
    }
    focusing.fireFocusEventWithTargetAdjustment("blur", this, this._ownerDocument);
    this._ownerDocument._lastFocusedElement = null;
    focusing.fireFocusEventWithTargetAdjustment("focus", this._ownerDocument, this);
  }
  click() {
    if (this._clickInProgress) {
      return;
    }
    this._clickInProgress = true;
    if (isDisabled(this)) {
      return;
    }
    const event = MouseEvent.createImpl(["click", {
      bubbles: true,
      cancelable: true
    }], {});
    this.dispatchEvent(event);
    this._clickInProgress = false;
  }
  get style() {
    return this._style;
  }
  set style(value) {
    this._style.cssText = value;
  }
  _attrModified(name, value, oldValue) {
    if (name === "style" && value !== oldValue && !this._settingCssText) {
      this._settingCssText = true;
      this._style.cssText = value;
      this._settingCssText = false;
    }
    super._attrModified.apply(this, arguments);
  }
  get tabIndex() {
    if (!this.hasAttribute("tabindex")) {
      return focusing.isFocusableAreaElement(this) ? 0 : -1;
    }
    return conversions.long(this.getAttribute("tabindex"));
  }
  set tabIndex(value) {
    this.setAttribute("tabIndex", String(value));
  }
  get offsetParent() {
    return null;
  }
  get offsetTop() {
    return 0;
  }
  get offsetLeft() {
    return 0;
  }
  get offsetWidth() {
    return 0;
  }
  get offsetHeight() {
    return 0;
  }
}
function callEventBehaviorHook(event, name, targetOverride) {
  if (event) {
    const target = targetOverride || event.target;
    if (target && typeof target[name] === "function") {
      target[name]();
    }
  }
}
module.exports = {implementation: HTMLElementImpl};
