/* */ 
module.exports = Walker;
var path = require('path'),
    fs = require('fs'),
    util = require('util'),
    EventEmitter = require('events').EventEmitter,
    makeError = require('../../makeerror/lib/makeerror');
function Walker(root) {
  if (!(this instanceof Walker))
    return new Walker(root);
  EventEmitter.call(this);
  this._pending = 0;
  this._filterDir = function() {
    return true;
  };
  this.go(root);
}
util.inherits(Walker, EventEmitter);
var UnknownFileTypeError = Walker.UnknownFileTypeError = makeError('UnknownFileTypeError', 'The type of this file could not be determined.');
Walker.prototype.filterDir = function(fn) {
  this._filterDir = fn;
  return this;
};
Walker.prototype.go = function(entry) {
  var that = this;
  this._pending++;
  fs.lstat(entry, function(er, stat) {
    if (er) {
      that.emit('error', er, entry, stat);
      that.doneOne();
      return;
    }
    if (stat.isDirectory()) {
      if (!that._filterDir(entry, stat)) {
        that.doneOne();
      } else {
        fs.readdir(entry, function(er, files) {
          if (er) {
            that.emit('error', er, entry, stat);
            that.doneOne();
            return;
          }
          that.emit('entry', entry, stat);
          that.emit('dir', entry, stat);
          files.forEach(function(part) {
            that.go(path.join(entry, part));
          });
          that.doneOne();
        });
      }
    } else if (stat.isSymbolicLink()) {
      that.emit('entry', entry, stat);
      that.emit('symlink', entry, stat);
      that.doneOne();
    } else if (stat.isBlockDevice()) {
      that.emit('entry', entry, stat);
      that.emit('blockDevice', entry, stat);
      that.doneOne();
    } else if (stat.isCharacterDevice()) {
      that.emit('entry', entry, stat);
      that.emit('characterDevice', entry, stat);
      that.doneOne();
    } else if (stat.isFIFO()) {
      that.emit('entry', entry, stat);
      that.emit('fifo', entry, stat);
      that.doneOne();
    } else if (stat.isSocket()) {
      that.emit('entry', entry, stat);
      that.emit('socket', entry, stat);
      that.doneOne();
    } else if (stat.isFile()) {
      that.emit('entry', entry, stat);
      that.emit('file', entry, stat);
      that.doneOne();
    } else {
      that.emit('error', UnknownFileTypeError(), entry, stat);
      that.doneOne();
    }
  });
  return this;
};
Walker.prototype.doneOne = function() {
  if (--this._pending === 0)
    this.emit('end');
  return this;
};
