/* */ 
(function(Buffer, process) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  var crypto = require('crypto');
  var fs = require('../../fs-extra/lib/index');
  var nodepath = require('path');
  var pkgDir = require('../../pkg-dir/index');
  var tsc = require('../../typescript/lib/typescript');
  var postprocess_1 = require('./postprocess');
  var utils_1 = require('./utils');
  function process(src, path, config, transformOptions) {
    if (transformOptions === void 0) {
      transformOptions = {instrument: false};
    }
    var compilerOptions = utils_1.getTSConfig(config.globals, transformOptions.instrument);
    var tsJestConfig = utils_1.getTSJestConfig(config.globals);
    var root = pkgDir.sync();
    var isTsFile = path.endsWith('.ts') || path.endsWith('.tsx');
    var isJsFile = path.endsWith('.js') || path.endsWith('.jsx');
    var isHtmlFile = path.endsWith('.html');
    var postHook = postprocess_1.getPostProcessHook(compilerOptions, config, tsJestConfig);
    if (isHtmlFile && config.globals.__TRANSFORM_HTML__) {
      src = 'module.exports=`' + src + '`;';
    }
    var processFile = compilerOptions.allowJs === true ? isTsFile || isJsFile : isTsFile;
    if (processFile) {
      var tsTranspiled = tsc.transpileModule(src, {
        compilerOptions: compilerOptions,
        fileName: path
      });
      var outputText = postHook(tsTranspiled.outputText, path, config, transformOptions);
      path = path.startsWith(root) ? path.substr(root.length) : path;
      if (!config.testRegex || !path.match(config.testRegex)) {
        var outputFilePath = nodepath.join(config.cacheDirectory, '/ts-jest/', new Buffer(path).toString('base64'));
        fs.outputFileSync(outputFilePath, outputText);
      }
      var start = outputText.length > 12 ? outputText.substr(1, 10) : '';
      var modified = start === 'use strict' ? "'use strict';require('ts-jest').install();" + outputText : "require('ts-jest').install();" + outputText;
      return modified;
    }
    return src;
  }
  exports.process = process;
  function getCacheKey(fileData, filePath, configStr, options) {
    if (options === void 0) {
      options = {instrument: false};
    }
    var jestConfig = JSON.parse(configStr);
    var tsConfig = utils_1.getTSConfig(jestConfig.globals, options.instrument);
    return crypto.createHash('md5').update(JSON.stringify(tsConfig), 'utf8').update(fileData + filePath + configStr, 'utf8').digest('hex');
  }
  exports.getCacheKey = getCacheKey;
})(require('buffer').Buffer, require('process'));
