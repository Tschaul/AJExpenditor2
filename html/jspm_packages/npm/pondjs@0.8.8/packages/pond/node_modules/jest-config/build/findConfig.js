/* */ 
(function(process) {
  'use strict';
  const fs = require('fs');
  const path = require('path');
  const jsonlint = require('./vendor/jsonlint');
  const JEST_CONFIG = 'jest.config.js';
  const PACKAGE_JSON = 'package.json';
  const isFile = (filePath) => fs.existsSync(filePath) && !fs.lstatSync(filePath).isDirectory();
  const findConfig = (root) => {
    let options = {};
    let directory = root;
    const isJS = directory.endsWith('.js');
    if ((isJS || directory.endsWith('.json')) && isFile(directory)) {
      const filePath = path.resolve(process.cwd(), directory);
      if (isJS) {
        options = require(filePath);
      } else {
        let pkg;
        try {
          pkg = require(filePath);
        } catch (error) {
          throw new Error(`Jest: Failed to parse config file ${filePath}\n` + `  ${jsonlint.errors(fs.readFileSync(filePath, 'utf8'))}`);
        }
        if (directory.endsWith(PACKAGE_JSON)) {
          options = pkg.jest || options;
        } else {
          options = pkg;
        }
      }
      options.rootDir = options.rootDir ? path.resolve(path.dirname(directory), options.rootDir) : path.dirname(directory);
      return options;
    }
    do {
      const configJsFilePath = path.resolve(path.join(directory, JEST_CONFIG));
      if (isFile(configJsFilePath)) {
        options = require(configJsFilePath);
        break;
      }
      const packageJsonFilePath = path.resolve(path.join(directory, PACKAGE_JSON));
      if (isFile(packageJsonFilePath)) {
        const pkg = require(packageJsonFilePath);
        if (pkg.jest) {
          options = pkg.jest;
        }
        break;
      }
    } while (directory !== (directory = path.dirname(directory)));
    options.rootDir = options.rootDir ? path.resolve(root, options.rootDir) : path.resolve(directory);
    return options;
  };
  module.exports = findConfig;
})(require('process'));
