/* */ 
(function(process) {
  var util = require('util'),
      path = require('path'),
      fs = require('fs'),
      mkdirp = require('../../mkdirp/index'),
      supportsColor = require('../../supports-color/index'),
      isAbsolute = path.isAbsolute || function(p) {
        return path.resolve(p) === path.normalize(p);
      };
  function ContentWriter() {}
  ContentWriter.prototype.write = function() {
    throw new Error('write: must be overridden');
  };
  ContentWriter.prototype.colorize = function(str) {
    return str;
  };
  ContentWriter.prototype.println = function(str) {
    this.write(str + '\n');
  };
  ContentWriter.prototype.close = function() {};
  function FileContentWriter(fd) {
    this.fd = fd;
  }
  util.inherits(FileContentWriter, ContentWriter);
  FileContentWriter.prototype.write = function(str) {
    fs.writeSync(this.fd, str);
  };
  FileContentWriter.prototype.close = function() {
    fs.closeSync(this.fd);
  };
  function ConsoleWriter() {}
  util.inherits(ConsoleWriter, ContentWriter);
  var capture = false;
  var output = '';
  ConsoleWriter.prototype.write = function(str) {
    if (capture) {
      output += str;
    } else {
      process.stdout.write(str);
    }
  };
  ConsoleWriter.prototype.colorize = function(str, clazz) {
    var colors = {
      low: '31;1',
      medium: '33;1',
      high: '32;1'
    };
    if (supportsColor && colors[clazz]) {
      return '\u001b[' + colors[clazz] + 'm' + str + '\u001b[0m';
    }
    return str;
  };
  function FileWriter(baseDir) {
    if (!baseDir) {
      throw new Error('baseDir must be specified');
    }
    mkdirp.sync(baseDir);
    this.baseDir = baseDir;
  }
  FileWriter.startCapture = function() {
    capture = true;
  };
  FileWriter.stopCapture = function() {
    capture = false;
  };
  FileWriter.getOutput = function() {
    return output;
  };
  FileWriter.resetOutput = function() {
    output = '';
  };
  FileWriter.prototype.writerForDir = function(subdir) {
    if (isAbsolute(subdir)) {
      throw new Error('Cannot create subdir writer for absolute path: ' + subdir);
    }
    return new FileWriter(this.baseDir + '/' + subdir);
  };
  FileWriter.prototype.copyFile = function(source, dest) {
    if (isAbsolute(dest)) {
      throw new Error('Cannot write to absolute path: ' + dest);
    }
    dest = path.resolve(this.baseDir, dest);
    mkdirp.sync(path.dirname(dest));
    fs.writeFileSync(dest, fs.readFileSync(source));
  };
  FileWriter.prototype.writeFile = function(file) {
    if (file === null || file === '-') {
      return new ConsoleWriter();
    }
    if (isAbsolute(file)) {
      throw new Error('Cannot write to absolute path: ' + file);
    }
    file = path.resolve(this.baseDir, file);
    mkdirp.sync(path.dirname(file));
    return new FileContentWriter(fs.openSync(file, 'w'));
  };
  module.exports = FileWriter;
})(require('process'));
