/* */ 
var FileWriter = require('./file-writer'),
    XMLWriter = require('./xml-writer'),
    tree = require('./tree'),
    watermarks = require('./watermarks'),
    fs = require('fs');
function defaultSourceLookup(path) {
  try {
    return fs.readFileSync(path, 'utf8');
  } catch (ex) {
    throw new Error('Unable to lookup source: ' + path + '(' + ex.message + ')');
  }
}
function mergeWatermarks(specified, defaults) {
  specified = specified || {};
  Object.keys(defaults).forEach(function(k) {
    var specValue = specified[k];
    if (!(specValue && Array.isArray(specValue) && specValue.length === 2)) {
      specified[k] = defaults[k];
    }
  });
  return specified;
}
function Context(opts) {
  opts = opts || {};
  this.dir = opts.dir || 'coverage';
  this.watermarks = mergeWatermarks(opts.watermarks, watermarks.getDefault());
  this.sourceFinder = opts.sourceFinder || defaultSourceLookup;
  this.data = {};
}
Object.defineProperty(Context.prototype, 'writer', {
  enumerable: true,
  get: function() {
    if (!this.data.writer) {
      this.data.writer = new FileWriter(this.dir);
    }
    return this.data.writer;
  }
});
Context.prototype.getWriter = function() {
  return this.writer;
};
Context.prototype.getSource = function(filePath) {
  return this.sourceFinder(filePath);
};
Context.prototype.classForPercent = function(type, value) {
  var watermarks = this.watermarks[type];
  if (!watermarks) {
    return 'unknown';
  }
  if (value < watermarks[0]) {
    return 'low';
  }
  if (value >= watermarks[1]) {
    return 'high';
  }
  return 'medium';
};
Context.prototype.getXMLWriter = function(contentWriter) {
  return new XMLWriter(contentWriter);
};
Context.prototype.getVisitor = function(partialVisitor) {
  return new tree.Visitor(partialVisitor);
};
module.exports = {create: function(opts) {
    return new Context(opts);
  }};
