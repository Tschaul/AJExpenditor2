/* */ 
(function(Buffer, process) {
  'use strict';
  function deepCopy(obj) {
    const newObj = {};
    let value;
    for (const key in obj) {
      value = obj[key];
      if (typeof value === 'object' && value !== null) {
        value = deepCopy(value);
      }
      newObj[key] = value;
    }
    return newObj;
  }
  module.exports = (global, globals) => {
    global.Buffer = Buffer;
    let toStringOverwrite;
    if (Symbol && Symbol.toStringTag) {
      toStringOverwrite = {[Symbol.toStringTag]: 'process'};
    }
    global.process = Object.assign({}, process, toStringOverwrite);
    global.process.setMaxListeners = process.setMaxListeners.bind(process);
    global.process.getMaxListeners = process.getMaxListeners.bind(process);
    global.process.emit = process.emit.bind(process);
    global.process.addListener = process.addListener.bind(process);
    global.process.on = process.on.bind(process);
    global.process.once = process.once.bind(process);
    global.process.removeListener = process.removeListener.bind(process);
    global.process.removeAllListeners = process.removeAllListeners.bind(process);
    global.process.listeners = process.listeners.bind(process);
    global.process.listenerCount = process.listenerCount.bind(process);
    global.setImmediate = setImmediate;
    global.clearImmediate = clearImmediate;
    Object.assign(global, deepCopy(globals));
  };
})(require('buffer').Buffer, require('process'));
