/* */ 
'use strict';
var _slicedToArray = function() {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
      for (var _i = arr[Symbol.iterator](),
          _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"])
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  return function(arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
const path = require('path');
const HasteMap = require('../../jest-haste-map/build/index');
const Resolver = require('../../jest-resolve/build/index');
var _require = require('../../jest-util/build/index');
const createDirectory = _require.createDirectory;
var _require2 = require('../../jest-regex-util/build/index');
const escapePathForRegex = _require2.escapePathForRegex;
const fs = require('../../graceful-fs/graceful-fs');
const stripBOM = require('../../strip-bom/index');
const ScriptTransformer = require('./ScriptTransformer');
const shouldInstrument = require('./shouldInstrument');
const NODE_MODULES = path.sep + 'node_modules' + path.sep;
const SNAPSHOT_EXTENSION = 'snap';
const getModuleNameMapper = (config) => {
  if (Array.isArray(config.moduleNameMapper) && config.moduleNameMapper.length) {
    return config.moduleNameMapper.map((_ref) => {
      var _ref2 = _slicedToArray(_ref, 2);
      let regex = _ref2[0],
          moduleName = _ref2[1];
      return {
        moduleName,
        regex: new RegExp(regex)
      };
    });
  }
  return null;
};
const mockParentModule = {
  exports: {},
  filename: 'mock.js',
  id: 'mockParent'
};
const unmockRegExpCache = new WeakMap();
class Runtime {
  constructor(config, environment, resolver, cacheFS, coverageOptions) {
    this._cacheFS = cacheFS || Object.create(null);
    this._config = config;
    this._coverageOptions = coverageOptions || {
      collectCoverage: false,
      collectCoverageFrom: [],
      collectCoverageOnlyFrom: null,
      mapCoverage: false
    };
    this._currentlyExecutingModulePath = '';
    this._environment = environment;
    this._explicitShouldMock = Object.create(null);
    this._internalModuleRegistry = Object.create(null);
    this._isCurrentlyExecutingManualMock = null;
    this._mockFactories = Object.create(null);
    this._mockRegistry = Object.create(null);
    this._moduleMocker = this._environment.moduleMocker;
    this._moduleRegistry = Object.create(null);
    this._resolver = resolver;
    this._scriptTransformer = new ScriptTransformer(config);
    this._shouldAutoMock = config.automock;
    this._sourceMapRegistry = Object.create(null);
    this._virtualMocks = Object.create(null);
    this._mockMetaDataCache = Object.create(null);
    this._shouldMockModuleCache = Object.create(null);
    this._shouldUnmockTransitiveDependenciesCache = Object.create(null);
    this._transitiveShouldMock = Object.create(null);
    this._unmockList = unmockRegExpCache.get(config);
    if (!this._unmockList && config.unmockedModulePathPatterns) {
      this._unmockList = new RegExp(config.unmockedModulePathPatterns.join('|'));
      unmockRegExpCache.set(config, this._unmockList);
    }
    if (config.automock) {
      config.setupFiles.forEach((filePath) => {
        if (filePath && filePath.includes(NODE_MODULES)) {
          const moduleID = this._resolver.getModuleID(this._virtualMocks, filePath);
          this._transitiveShouldMock[moduleID] = false;
        }
      });
    }
    this.resetModules();
    if (config.setupFiles.length) {
      for (let i = 0; i < config.setupFiles.length; i++) {
        this.requireModule(config.setupFiles[i]);
      }
    }
  }
  static shouldInstrument(filename, options, config) {
    return shouldInstrument(filename, {
      collectCoverage: options.collectCoverage,
      collectCoverageFrom: options.collectCoverageFrom,
      collectCoverageOnlyFrom: options.collectCoverageOnlyFrom,
      mapCoverage: options.mapCoverage
    }, config);
  }
  static createContext(config, options) {
    createDirectory(config.cacheDirectory);
    const instance = Runtime.createHasteMap(config, {
      console: options.console,
      maxWorkers: options.maxWorkers,
      resetCache: !config.cache,
      watch: options.watch,
      watchman: options.watchman
    });
    return instance.build().then((hasteMap) => ({
      config,
      hasteFS: hasteMap.hasteFS,
      moduleMap: hasteMap.moduleMap,
      resolver: Runtime.createResolver(config, hasteMap.moduleMap)
    }), (error) => {
      throw error;
    });
  }
  static createHasteMap(config, options) {
    const ignorePattern = new RegExp([config.cacheDirectory].concat(config.modulePathIgnorePatterns).join('|'));
    return new HasteMap({
      cacheDirectory: config.cacheDirectory,
      console: options && options.console,
      extensions: [SNAPSHOT_EXTENSION].concat(config.moduleFileExtensions),
      hasteImplModulePath: config.haste.hasteImplModulePath,
      ignorePattern,
      maxWorkers: options && options.maxWorkers || 1,
      mocksPattern: escapePathForRegex(path.sep + '__mocks__' + path.sep),
      name: config.name,
      platforms: config.haste.platforms || ['ios', 'android'],
      providesModuleNodeModules: config.haste.providesModuleNodeModules,
      resetCache: options && options.resetCache,
      retainAllFiles: false,
      roots: config.roots,
      useWatchman: options && options.watchman,
      watch: options && options.watch
    });
  }
  static createResolver(config, moduleMap) {
    return new Resolver(moduleMap, {
      browser: config.browser,
      defaultPlatform: config.haste.defaultPlatform,
      extensions: config.moduleFileExtensions.map((extension) => '.' + extension),
      hasCoreModules: true,
      moduleDirectories: config.moduleDirectories,
      moduleNameMapper: getModuleNameMapper(config),
      modulePaths: config.modulePaths,
      platforms: config.haste.platforms,
      resolver: config.resolver
    });
  }
  static runCLI(args, info) {
    return require('./cli/index').run(args, info);
  }
  static getCLIOptions() {
    return require('./cli/args').options;
  }
  requireModule(from, moduleName, options) {
    const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
    let modulePath;
    const moduleRegistry = !options || !options.isInternalModule ? this._moduleRegistry : this._internalModuleRegistry;
    const moduleResource = moduleName && this._resolver.getModule(moduleName);
    const manualMock = moduleName && this._resolver.getMockModule(from, moduleName);
    if ((!options || !options.isInternalModule) && !moduleResource && manualMock && manualMock !== this._isCurrentlyExecutingManualMock && this._explicitShouldMock[moduleID] !== false) {
      modulePath = manualMock;
    }
    if (moduleName && this._resolver.isCoreModule(moduleName)) {
      return require(moduleName);
    }
    if (!modulePath) {
      modulePath = this._resolveModule(from, moduleName);
    }
    if (!moduleRegistry[modulePath]) {
      const localModule = {
        exports: {},
        filename: modulePath,
        id: modulePath
      };
      moduleRegistry[modulePath] = localModule;
      if (path.extname(modulePath) === '.json') {
        localModule.exports = this._environment.global.JSON.parse(stripBOM(fs.readFileSync(modulePath, 'utf8')));
      } else if (path.extname(modulePath) === '.node') {
        localModule.exports = require(modulePath);
      } else {
        this._execModule(localModule, options);
      }
    }
    return moduleRegistry[modulePath].exports;
  }
  requireInternalModule(from, to) {
    return this.requireModule(from, to, {isInternalModule: true});
  }
  requireMock(from, moduleName) {
    const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
    if (this._mockRegistry[moduleID]) {
      return this._mockRegistry[moduleID];
    }
    if (moduleID in this._mockFactories) {
      return this._mockRegistry[moduleID] = this._mockFactories[moduleID]();
    }
    let manualMock = this._resolver.getMockModule(from, moduleName);
    let modulePath;
    if (manualMock) {
      modulePath = this._resolveModule(from, manualMock);
    } else {
      modulePath = this._resolveModule(from, moduleName);
      const moduleDir = path.dirname(modulePath);
      const moduleFileName = path.basename(modulePath);
      const potentialManualMock = path.join(moduleDir, '__mocks__', moduleFileName);
      if (fs.existsSync(potentialManualMock)) {
        manualMock = true;
        modulePath = potentialManualMock;
      }
    }
    if (manualMock) {
      const localModule = {
        exports: {},
        filename: modulePath,
        id: modulePath
      };
      this._execModule(localModule);
      this._mockRegistry[moduleID] = localModule.exports;
    } else {
      this._mockRegistry[moduleID] = this._generateMock(from, moduleName);
    }
    return this._mockRegistry[moduleID];
  }
  requireModuleOrMock(from, moduleName) {
    if (this._shouldMock(from, moduleName)) {
      return this.requireMock(from, moduleName);
    } else {
      return this.requireModule(from, moduleName);
    }
  }
  resetModules() {
    this._mockRegistry = Object.create(null);
    this._moduleRegistry = Object.create(null);
    if (this._environment && this._environment.global) {
      const envGlobal = this._environment.global;
      Object.keys(envGlobal).forEach((key) => {
        const globalMock = envGlobal[key];
        if (typeof globalMock === 'object' && globalMock !== null || typeof globalMock === 'function') {
          globalMock._isMockFunction && globalMock.mockClear();
        }
      });
      if (envGlobal.mockClearTimers) {
        envGlobal.mockClearTimers();
      }
    }
  }
  getAllCoverageInfo() {
    return this._environment.global.__coverage__;
  }
  getSourceMapInfo() {
    return Object.keys(this._sourceMapRegistry).reduce((result, sourcePath) => {
      if (fs.existsSync(this._sourceMapRegistry[sourcePath])) {
        result[sourcePath] = this._sourceMapRegistry[sourcePath];
      }
      return result;
    }, {});
  }
  setMock(from, moduleName, mockFactory, options) {
    if (options && options.virtual) {
      const mockPath = this._resolver.getModulePath(from, moduleName);
      this._virtualMocks[mockPath] = true;
    }
    const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
    this._explicitShouldMock[moduleID] = true;
    this._mockFactories[moduleID] = mockFactory;
  }
  resetAllMocks() {
    this._moduleMocker.resetAllMocks();
  }
  clearAllMocks() {
    this._moduleMocker.clearAllMocks();
  }
  _resolveModule(from, to) {
    return to ? this._resolver.resolveModule(from, to) : from;
  }
  _execModule(localModule, options) {
    if (!this._environment.global) {
      return;
    }
    const isInternalModule = !!(options && options.isInternalModule);
    const filename = localModule.filename;
    const lastExecutingModulePath = this._currentlyExecutingModulePath;
    this._currentlyExecutingModulePath = filename;
    const origCurrExecutingManualMock = this._isCurrentlyExecutingManualMock;
    this._isCurrentlyExecutingManualMock = filename;
    const dirname = path.dirname(filename);
    localModule.children = [];
    localModule.parent = mockParentModule;
    localModule.paths = this._resolver.getModulePaths(dirname);
    localModule.require = this._createRequireImplementation(filename, options);
    const transformedFile = this._scriptTransformer.transform(filename, {
      collectCoverage: this._coverageOptions.collectCoverage,
      collectCoverageFrom: this._coverageOptions.collectCoverageFrom,
      collectCoverageOnlyFrom: this._coverageOptions.collectCoverageOnlyFrom,
      isInternalModule,
      mapCoverage: this._coverageOptions.mapCoverage
    }, this._cacheFS[filename]);
    if (transformedFile.sourceMapPath) {
      this._sourceMapRegistry[filename] = transformedFile.sourceMapPath;
    }
    const wrapper = this._environment.runScript(transformedFile.script)[ScriptTransformer.EVAL_RESULT_VARIABLE];
    wrapper.call(localModule.exports, localModule, localModule.exports, localModule.require, dirname, filename, this._environment.global, this._createRuntimeFor(filename));
    this._isCurrentlyExecutingManualMock = origCurrExecutingManualMock;
    this._currentlyExecutingModulePath = lastExecutingModulePath;
  }
  _generateMock(from, moduleName) {
    const modulePath = this._resolveModule(from, moduleName);
    if (!(modulePath in this._mockMetaDataCache)) {
      this._mockMetaDataCache[modulePath] = this._moduleMocker.getMetadata({});
      const origMockRegistry = this._mockRegistry;
      const origModuleRegistry = this._moduleRegistry;
      this._mockRegistry = Object.create(null);
      this._moduleRegistry = Object.create(null);
      const moduleExports = this.requireModule(from, moduleName);
      this._mockRegistry = origMockRegistry;
      this._moduleRegistry = origModuleRegistry;
      const mockMetadata = this._moduleMocker.getMetadata(moduleExports);
      if (mockMetadata == null) {
        throw new Error(`Failed to get mock metadata: ${modulePath}\n\n` + `See: http://facebook.github.io/jest/docs/manual-mocks.html#content`);
      }
      this._mockMetaDataCache[modulePath] = mockMetadata;
    }
    return this._moduleMocker.generateFromMetadata(this._mockMetaDataCache[modulePath]);
  }
  _shouldMock(from, moduleName) {
    const mockPath = this._resolver.getModulePath(from, moduleName);
    if (mockPath in this._virtualMocks) {
      return true;
    }
    const explicitShouldMock = this._explicitShouldMock;
    const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
    const key = from + path.delimiter + moduleID;
    if (moduleID in explicitShouldMock) {
      return explicitShouldMock[moduleID];
    }
    if (!this._shouldAutoMock || this._resolver.isCoreModule(moduleName) || this._shouldUnmockTransitiveDependenciesCache[key]) {
      return false;
    }
    if (moduleID in this._shouldMockModuleCache) {
      return this._shouldMockModuleCache[moduleID];
    }
    let modulePath;
    try {
      modulePath = this._resolveModule(from, moduleName);
    } catch (e) {
      const manualMock = this._resolver.getMockModule(from, moduleName);
      if (manualMock) {
        this._shouldMockModuleCache[moduleID] = true;
        return true;
      }
      throw e;
    }
    if (this._unmockList && this._unmockList.test(modulePath)) {
      this._shouldMockModuleCache[moduleID] = false;
      return false;
    }
    const currentModuleID = this._resolver.getModuleID(this._virtualMocks, from);
    if (this._transitiveShouldMock[currentModuleID] === false || from.includes(NODE_MODULES) && modulePath.includes(NODE_MODULES) && (this._unmockList && this._unmockList.test(from) || explicitShouldMock[currentModuleID] === false)) {
      this._transitiveShouldMock[moduleID] = false;
      this._shouldUnmockTransitiveDependenciesCache[key] = true;
      return false;
    }
    return this._shouldMockModuleCache[moduleID] = true;
  }
  _createRequireImplementation(from, options) {
    const moduleRequire = options && options.isInternalModule ? (moduleName) => this.requireInternalModule(from, moduleName) : this.requireModuleOrMock.bind(this, from);
    moduleRequire.cache = Object.create(null);
    moduleRequire.extensions = Object.create(null);
    moduleRequire.requireActual = this.requireModule.bind(this, from);
    moduleRequire.requireMock = this.requireMock.bind(this, from);
    moduleRequire.resolve = (moduleName) => this._resolveModule(from, moduleName);
    return moduleRequire;
  }
  _createRuntimeFor(from) {
    const disableAutomock = () => {
      this._shouldAutoMock = false;
      return runtime;
    };
    const enableAutomock = () => {
      this._shouldAutoMock = true;
      return runtime;
    };
    const unmock = (moduleName) => {
      const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
      this._explicitShouldMock[moduleID] = false;
      return runtime;
    };
    const deepUnmock = (moduleName) => {
      const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
      this._explicitShouldMock[moduleID] = false;
      this._transitiveShouldMock[moduleID] = false;
      return runtime;
    };
    const mock = (moduleName, mockFactory, options) => {
      if (mockFactory !== undefined) {
        return setMockFactory(moduleName, mockFactory, options);
      }
      const moduleID = this._resolver.getModuleID(this._virtualMocks, from, moduleName);
      this._explicitShouldMock[moduleID] = true;
      return runtime;
    };
    const setMockFactory = (moduleName, mockFactory, options) => {
      this.setMock(from, moduleName, mockFactory, options);
      return runtime;
    };
    const clearAllMocks = () => {
      this.clearAllMocks();
      return runtime;
    };
    const resetAllMocks = () => {
      this.resetAllMocks();
      return runtime;
    };
    const useFakeTimers = () => {
      this._environment.fakeTimers.useFakeTimers();
      return runtime;
    };
    const useRealTimers = () => {
      this._environment.fakeTimers.useRealTimers();
      return runtime;
    };
    const resetModules = () => {
      this.resetModules();
      return runtime;
    };
    const fn = this._moduleMocker.fn.bind(this._moduleMocker);
    const spyOn = this._moduleMocker.spyOn.bind(this._moduleMocker);
    const runtime = {
      addMatchers: (matchers) => this._environment.global.jasmine.addMatchers(matchers),
      autoMockOff: disableAutomock,
      autoMockOn: enableAutomock,
      clearAllMocks,
      clearAllTimers: () => this._environment.fakeTimers.clearAllTimers(),
      deepUnmock,
      disableAutomock,
      doMock: mock,
      dontMock: unmock,
      enableAutomock,
      fn,
      genMockFn: fn,
      genMockFromModule: (moduleName) => this._generateMock(from, moduleName),
      genMockFunction: fn,
      isMockFunction: this._moduleMocker.isMockFunction,
      mock,
      resetAllMocks,
      resetModuleRegistry: resetModules,
      resetModules,
      runAllImmediates: () => this._environment.fakeTimers.runAllImmediates(),
      runAllTicks: () => this._environment.fakeTimers.runAllTicks(),
      runAllTimers: () => this._environment.fakeTimers.runAllTimers(),
      runOnlyPendingTimers: () => this._environment.fakeTimers.runOnlyPendingTimers(),
      runTimersToTime: (msToRun) => this._environment.fakeTimers.runTimersToTime(msToRun),
      setMock: (moduleName, mock) => setMockFactory(moduleName, () => mock),
      spyOn,
      unmock,
      useFakeTimers,
      useRealTimers
    };
    return runtime;
  }
}
Runtime.ScriptTransformer = ScriptTransformer;
module.exports = Runtime;
