/* */ 
(function(process) {
  var tmpl = require('../../tmpl/lib/tmpl');
  module.exports = makeError;
  function BaseError() {}
  BaseError.prototype = new Error();
  BaseError.prototype.toString = function() {
    return this.message;
  };
  function makeError(name, defaultMessage, defaultData) {
    defaultMessage = tmpl(defaultMessage || '');
    defaultData = defaultData || {};
    if (defaultData.proto && !(defaultData.proto instanceof BaseError))
      throw new Error('The custom "proto" must be an Error created via makeError');
    var CustomError = function(message, data) {
      if (!(this instanceof CustomError))
        return new CustomError(message, data);
      if (typeof message !== 'string' && !data) {
        data = message;
        message = null;
      }
      this.name = name;
      this.data = data || defaultData;
      if (typeof message === 'string') {
        this.message = tmpl(message, this.data);
      } else {
        this.message = defaultMessage(this.data);
      }
      var er = new Error();
      this.stack = er.stack;
      if (this.stack) {
        if (typeof Components !== 'undefined') {
          this.stack = this.stack.substring(this.stack.indexOf('\n') + 2);
        } else if (typeof chrome !== 'undefined' || typeof process !== 'undefined') {
          this.stack = this.stack.replace(/\n[^\n]*/, '');
          this.stack = this.stack.replace(/\n[^\n]*/, '');
          this.stack = (this.name + (this.message ? (': ' + this.message) : '') + this.stack.substring(5));
        }
      }
      if ('fileName' in er)
        this.fileName = er.fileName;
      if ('lineNumber' in er)
        this.lineNumber = er.lineNumber;
    };
    CustomError.prototype = defaultData.proto || new BaseError();
    delete defaultData.proto;
    return CustomError;
  }
})(require('process'));
