/* */ 
"use strict";
var FileCoverage = require('./file').FileCoverage,
    CoverageSummary = require('./file').CoverageSummary;
function loadMap(source) {
  var data = {};
  Object.keys(source).forEach(function(k) {
    var cov = source[k];
    if (cov instanceof FileCoverage) {
      data[k] = cov;
    } else {
      data[k] = new FileCoverage(cov);
    }
  });
  return data;
}
function CoverageMap(obj) {
  if (!obj) {
    this.data = {};
  } else if (obj instanceof CoverageMap) {
    this.data = obj.data;
  } else {
    this.data = loadMap(obj);
  }
}
CoverageMap.prototype.merge = function(obj) {
  var that = this,
      other;
  if (obj instanceof CoverageMap) {
    other = obj;
  } else {
    other = new CoverageMap(obj);
  }
  Object.keys(other.data).forEach(function(k) {
    var fc = other.data[k];
    if (that.data[k]) {
      that.data[k].merge(fc);
    } else {
      that.data[k] = fc;
    }
  });
};
CoverageMap.prototype.filter = function(callback) {
  var that = this;
  Object.keys(that.data).forEach(function(k) {
    if (!callback(k)) {
      delete that.data[k];
    }
  });
};
CoverageMap.prototype.toJSON = function() {
  return this.data;
};
CoverageMap.prototype.files = function() {
  return Object.keys(this.data);
};
CoverageMap.prototype.fileCoverageFor = function(file) {
  var fc = this.data[file];
  if (!fc) {
    throw new Error('No file coverage available for: ' + file);
  }
  return fc;
};
CoverageMap.prototype.addFileCoverage = function(fc) {
  var cov = new FileCoverage(fc),
      path = cov.path;
  if (this.data[path]) {
    this.data[path].merge(cov);
  } else {
    this.data[path] = cov;
  }
};
CoverageMap.prototype.getCoverageSummary = function() {
  var that = this,
      ret = new CoverageSummary();
  this.files().forEach(function(key) {
    ret.merge(that.fileCoverageFor(key).toSummary());
  });
  return ret;
};
module.exports = {CoverageMap: CoverageMap};
