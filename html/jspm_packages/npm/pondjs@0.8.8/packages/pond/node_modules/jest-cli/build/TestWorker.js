/* */ 
(function(process) {
  'use strict';
  process.on('uncaughtException', (err) => {
    console.error(err.stack);
    process.exit(1);
  });
  var _require = require('../../jest-haste-map/build/index');
  const ModuleMap = _require.ModuleMap;
  var _require2 = require('../../jest-message-util/build/index');
  const separateMessageFromStack = _require2.separateMessageFromStack;
  const Runtime = require('../../jest-runtime/build/index');
  const runTest = require('./runTest');
  const formatError = (error) => {
    if (typeof error === 'string') {
      var _separateMessageFromS = separateMessageFromStack(error);
      const message = _separateMessageFromS.message,
          stack = _separateMessageFromS.stack;
      return {
        message,
        stack,
        type: 'Error'
      };
    }
    return {
      message: error.message,
      stack: error.stack,
      type: 'Error'
    };
  };
  const resolvers = Object.create(null);
  const getResolver = (config, rawModuleMap) => {
    if (rawModuleMap) {
      return Runtime.createResolver(config, new ModuleMap(rawModuleMap.map, rawModuleMap.mocks));
    } else {
      const name = config.name;
      if (!resolvers[name]) {
        resolvers[name] = Runtime.createResolver(config, Runtime.createHasteMap(config).readModuleMap());
      }
      return resolvers[name];
    }
  };
  module.exports = (_ref, callback) => {
    let config = _ref.config,
        globalConfig = _ref.globalConfig,
        path = _ref.path,
        rawModuleMap = _ref.rawModuleMap;
    let parentExited = false;
    const disconnectCallback = () => parentExited = true;
    const removeListener = () => process.removeListener('disconnect', disconnectCallback);
    process.on('disconnect', disconnectCallback);
    try {
      runTest(path, globalConfig, config, getResolver(config, rawModuleMap)).then((result) => {
        removeListener();
        if (!parentExited) {
          callback(null, result);
        }
      }, (error) => {
        removeListener();
        if (!parentExited) {
          callback(formatError(error));
        }
      });
    } catch (error) {
      callback(formatError(error));
    }
  };
})(require('process'));
