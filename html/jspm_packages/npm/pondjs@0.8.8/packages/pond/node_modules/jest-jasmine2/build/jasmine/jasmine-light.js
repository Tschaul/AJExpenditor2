/* */ 
'use strict';
const createSpy = require('./createSpy');
const Env = require('./Env');
const JsApiReporter = require('./JsApiReporter');
const ReportDispatcher = require('./ReportDispatcher');
const Spec = require('./Spec');
const SpyRegistry = require('./SpyRegistry');
const Suite = require('./Suite');
const Timer = require('./Timer');
exports.create = function() {
  const j$ = {};
  j$.DEFAULT_TIMEOUT_INTERVAL = 5000;
  j$.getEnv = function(options) {
    const env = j$.currentEnv_ = j$.currentEnv_ || new j$.Env(options);
    return env;
  };
  j$.createSpy = createSpy;
  j$.Env = Env(j$);
  j$.JsApiReporter = JsApiReporter;
  j$.ReportDispatcher = ReportDispatcher;
  j$.Spec = Spec;
  j$.SpyRegistry = SpyRegistry;
  j$.Suite = Suite;
  j$.Timer = Timer;
  j$.version = '2.5.2-light';
  return j$;
};
exports.interface = function(jasmine, env) {
  const jasmineInterface = {
    describe(description, specDefinitions) {
      return env.describe(description, specDefinitions);
    },
    xdescribe(description, specDefinitions) {
      return env.xdescribe(description, specDefinitions);
    },
    fdescribe(description, specDefinitions) {
      return env.fdescribe(description, specDefinitions);
    },
    it() {
      return env.it.apply(env, arguments);
    },
    xit() {
      return env.xit.apply(env, arguments);
    },
    fit() {
      return env.fit.apply(env, arguments);
    },
    beforeEach() {
      return env.beforeEach.apply(env, arguments);
    },
    afterEach() {
      return env.afterEach.apply(env, arguments);
    },
    beforeAll() {
      return env.beforeAll.apply(env, arguments);
    },
    afterAll() {
      return env.afterAll.apply(env, arguments);
    },
    pending() {
      return env.pending.apply(env, arguments);
    },
    fail() {
      return env.fail.apply(env, arguments);
    },
    spyOn(obj, methodName) {
      return env.spyOn(obj, methodName);
    },
    jsApiReporter: new jasmine.JsApiReporter({timer: new jasmine.Timer()}),
    jasmine
  };
  return jasmineInterface;
};
