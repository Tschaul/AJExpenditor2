/* */ 
'use strict';
const once = require('../../once/once');
const pMap = require('../../p-map/index');
const pTimeout = require('./p-timeout');
function queueRunner(options) {
  const mapper = (_ref) => {
    let fn = _ref.fn,
        timeout = _ref.timeout;
    const promise = new Promise((resolve) => {
      const next = once(resolve);
      next.fail = function() {
        options.fail.apply(null, arguments);
        resolve();
      };
      try {
        fn.call(options.userContext, next);
      } catch (e) {
        options.onException(e);
        resolve();
      }
    });
    if (!timeout) {
      return promise;
    }
    return pTimeout(promise, timeout(), options.clearTimeout, options.setTimeout, () => {
      const error = new Error('Timeout - Async callback was not invoked within timeout specified ' + 'by jasmine.DEFAULT_TIMEOUT_INTERVAL.');
      options.onException(error);
    });
  };
  return pMap(options.queueableFns, mapper, {concurrency: 1});
}
module.exports = queueRunner;
