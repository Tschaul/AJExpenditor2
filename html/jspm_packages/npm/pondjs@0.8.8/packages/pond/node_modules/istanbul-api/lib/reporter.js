/* */ 
var path = require('path'),
    configuration = require('./config'),
    inputError = require('./input-error'),
    libReport = require('../../istanbul-lib-report/index'),
    libReports = require('../../istanbul-reports/index');
function Reporter(cfg, opts) {
  opts = opts || {};
  this.config = cfg || configuration.loadFile();
  this.dir = path.resolve(this.config.reporting.dir());
  this.reports = {};
  var summarizer = opts.summarizer,
      s = this.config.reporting.summarizer();
  if (summarizer && typeof summarizer === 'function') {
    this.summarizer = summarizer;
  } else {
    summarizer = libReport.summarizers[s];
    if (!summarizer) {
      throw inputError.create('Invalid summarizer in report config: ' + s);
    }
    this.summarizer = summarizer;
  }
}
Reporter.prototype = {
  add: function(fmt) {
    if (this.reports[fmt]) {
      return;
    }
    var config = this.config,
        rptConfig = config.reporting.reportConfig()[fmt] || {};
    rptConfig.verbose = config.verbose;
    try {
      if (this.config.verbose) {
        console.error('Create report', fmt, ' with', rptConfig);
      }
      this.reports[fmt] = libReports.create(fmt, rptConfig);
    } catch (ex) {
      throw inputError.create('Invalid report format [' + fmt + ']');
    }
  },
  addAll: function(fmts) {
    var that = this;
    fmts.forEach(function(f) {
      that.add(f);
    });
  },
  write: function(coverageMap, opts) {
    opts = opts || {};
    var that = this,
        sourceFinder = opts.sourceFinder || null,
        context,
        tree;
    context = libReport.createContext({
      dir: this.dir,
      watermarks: this.config.reporting.watermarks(),
      sourceFinder: sourceFinder
    });
    tree = this.summarizer(coverageMap);
    Object.keys(this.reports).forEach(function(name) {
      var report = that.reports[name];
      tree.visit(report, context);
    });
  }
};
module.exports = Reporter;
